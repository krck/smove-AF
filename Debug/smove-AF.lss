
smove-AF.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000130c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800100  00800100  00001380  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  0000141c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000184f  00000000  00000000  0000157c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000484  00000000  00000000  00002dcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bc6  00000000  00000000  0000324f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000498  00000000  00000000  00003e18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005fa  00000000  00000000  000042b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001588  00000000  00000000  000048aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  00005e32  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	63 c0       	rjmp	.+198    	; 0xc8 <__ctors_end>
       2:	00 00       	nop
       4:	72 c0       	rjmp	.+228    	; 0xea <__bad_interrupt>
       6:	00 00       	nop
       8:	70 c0       	rjmp	.+224    	; 0xea <__bad_interrupt>
       a:	00 00       	nop
       c:	6e c0       	rjmp	.+220    	; 0xea <__bad_interrupt>
       e:	00 00       	nop
      10:	6c c0       	rjmp	.+216    	; 0xea <__bad_interrupt>
      12:	00 00       	nop
      14:	6a c0       	rjmp	.+212    	; 0xea <__bad_interrupt>
      16:	00 00       	nop
      18:	68 c0       	rjmp	.+208    	; 0xea <__bad_interrupt>
      1a:	00 00       	nop
      1c:	66 c0       	rjmp	.+204    	; 0xea <__bad_interrupt>
      1e:	00 00       	nop
      20:	64 c0       	rjmp	.+200    	; 0xea <__bad_interrupt>
      22:	00 00       	nop
      24:	62 c0       	rjmp	.+196    	; 0xea <__bad_interrupt>
      26:	00 00       	nop
      28:	60 c0       	rjmp	.+192    	; 0xea <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5e c0       	rjmp	.+188    	; 0xea <__bad_interrupt>
      2e:	00 00       	nop
      30:	5c c0       	rjmp	.+184    	; 0xea <__bad_interrupt>
      32:	00 00       	nop
      34:	5a c0       	rjmp	.+180    	; 0xea <__bad_interrupt>
      36:	00 00       	nop
      38:	58 c0       	rjmp	.+176    	; 0xea <__bad_interrupt>
      3a:	00 00       	nop
      3c:	56 c0       	rjmp	.+172    	; 0xea <__bad_interrupt>
      3e:	00 00       	nop
      40:	54 c0       	rjmp	.+168    	; 0xea <__bad_interrupt>
      42:	00 00       	nop
      44:	52 c0       	rjmp	.+164    	; 0xea <__bad_interrupt>
      46:	00 00       	nop
      48:	50 c0       	rjmp	.+160    	; 0xea <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4e c0       	rjmp	.+156    	; 0xea <__bad_interrupt>
      4e:	00 00       	nop
      50:	4c c0       	rjmp	.+152    	; 0xea <__bad_interrupt>
      52:	00 00       	nop
      54:	4a c0       	rjmp	.+148    	; 0xea <__bad_interrupt>
      56:	00 00       	nop
      58:	48 c0       	rjmp	.+144    	; 0xea <__bad_interrupt>
      5a:	00 00       	nop
      5c:	46 c0       	rjmp	.+140    	; 0xea <__bad_interrupt>
      5e:	00 00       	nop
      60:	44 c0       	rjmp	.+136    	; 0xea <__bad_interrupt>
      62:	00 00       	nop
      64:	42 c0       	rjmp	.+132    	; 0xea <__bad_interrupt>
      66:	00 00       	nop
      68:	40 c0       	rjmp	.+128    	; 0xea <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3e c0       	rjmp	.+124    	; 0xea <__bad_interrupt>
      6e:	00 00       	nop
      70:	3c c0       	rjmp	.+120    	; 0xea <__bad_interrupt>
      72:	00 00       	nop
      74:	3a c0       	rjmp	.+116    	; 0xea <__bad_interrupt>
      76:	00 00       	nop
      78:	38 c0       	rjmp	.+112    	; 0xea <__bad_interrupt>
      7a:	00 00       	nop
      7c:	36 c0       	rjmp	.+108    	; 0xea <__bad_interrupt>
      7e:	00 00       	nop
      80:	34 c0       	rjmp	.+104    	; 0xea <__bad_interrupt>
      82:	00 00       	nop
      84:	32 c0       	rjmp	.+100    	; 0xea <__bad_interrupt>
      86:	00 00       	nop
      88:	30 c0       	rjmp	.+96     	; 0xea <__bad_interrupt>
	...

0000008c <__trampolines_end>:
      8c:	4e 41       	sbci	r20, 0x1E	; 30
      8e:	4e 49       	Address 0x0000008e is out of bounds.
.word	0xffff	; ????

0000008f <pstr_inity>:
      8f:	49 4e 49 54 59                                      INITY

00000094 <pstr_inf>:
      94:	49 4e 46                                            INF

00000097 <pwr_m10>:
      97:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      a7:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000af <pwr_p10>:
      af:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      bf:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000000c8 <__ctors_end>:
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf ef       	ldi	r28, 0xFF	; 255
      ce:	d0 e4       	ldi	r29, 0x40	; 64
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_clear_bss>:
      d4:	21 e0       	ldi	r18, 0x01	; 1
      d6:	a0 e0       	ldi	r26, 0x00	; 0
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	01 c0       	rjmp	.+2      	; 0xde <.do_clear_bss_start>

000000dc <.do_clear_bss_loop>:
      dc:	1d 92       	st	X+, r1

000000de <.do_clear_bss_start>:
      de:	ac 31       	cpi	r26, 0x1C	; 28
      e0:	b2 07       	cpc	r27, r18
      e2:	e1 f7       	brne	.-8      	; 0xdc <.do_clear_bss_loop>
      e4:	ec d4       	rcall	.+2520   	; 0xabe <main>
      e6:	0c 94 84 09 	jmp	0x1308	; 0x1308 <_exit>

000000ea <__bad_interrupt>:
      ea:	8a cf       	rjmp	.-236    	; 0x0 <__vectors>

000000ec <serial_init>:
uint32 calc_steps(float mm, uint8 axis) {
	if(axis == AXIS_NUM_X) { return abs((int32)(mm * X_STEPS_MM)); }
	else if(axis == AXIS_NUM_Y) { return abs((int32)(mm * Y_STEPS_MM)); }
	else if(axis == AXIS_NUM_Z) { return abs((int32)(mm * Z_STEPS_MM)); }
	else { return 0; }
}
      ec:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
      f0:	80 e1       	ldi	r24, 0x10	; 16
      f2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
      f6:	88 e1       	ldi	r24, 0x18	; 24
      f8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
      fc:	8e e0       	ldi	r24, 0x0E	; 14
      fe:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     102:	08 95       	ret

00000104 <serial_receive>:
     104:	e0 ec       	ldi	r30, 0xC0	; 192
     106:	f0 e0       	ldi	r31, 0x00	; 0
     108:	80 81       	ld	r24, Z
     10a:	88 23       	and	r24, r24
     10c:	ec f7       	brge	.-6      	; 0x108 <serial_receive+0x4>
     10e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     112:	08 95       	ret

00000114 <serial_receive_string>:
     114:	ef 92       	push	r14
     116:	ff 92       	push	r15
     118:	0f 93       	push	r16
     11a:	1f 93       	push	r17
     11c:	cf 93       	push	r28
     11e:	df 93       	push	r29
     120:	08 2f       	mov	r16, r24
     122:	19 2f       	mov	r17, r25
     124:	e6 2e       	mov	r14, r22
     126:	ee df       	rcall	.-36     	; 0x104 <serial_receive>
     128:	8a 30       	cpi	r24, 0x0A	; 10
     12a:	c1 f0       	breq	.+48     	; 0x15c <serial_receive_string+0x48>
     12c:	f1 2c       	mov	r15, r1
     12e:	91 e0       	ldi	r25, 0x01	; 1
     130:	e9 1a       	sub	r14, r25
     132:	f1 08       	sbc	r15, r1
     134:	1e 14       	cp	r1, r14
     136:	1f 04       	cpc	r1, r15
     138:	a4 f4       	brge	.+40     	; 0x162 <serial_receive_string+0x4e>
     13a:	c0 2f       	mov	r28, r16
     13c:	d1 2f       	mov	r29, r17
     13e:	21 96       	adiw	r28, 0x01	; 1
     140:	fe 01       	movw	r30, r28
     142:	31 97       	sbiw	r30, 0x01	; 1
     144:	80 83       	st	Z, r24
     146:	1c 2f       	mov	r17, r28
     148:	10 1b       	sub	r17, r16
     14a:	dc df       	rcall	.-72     	; 0x104 <serial_receive>
     14c:	8a 30       	cpi	r24, 0x0A	; 10
     14e:	59 f0       	breq	.+22     	; 0x166 <serial_receive_string+0x52>
     150:	21 2f       	mov	r18, r17
     152:	30 e0       	ldi	r19, 0x00	; 0
     154:	2e 15       	cp	r18, r14
     156:	3f 05       	cpc	r19, r15
     158:	94 f3       	brlt	.-28     	; 0x13e <serial_receive_string+0x2a>
     15a:	05 c0       	rjmp	.+10     	; 0x166 <serial_receive_string+0x52>
     15c:	c0 2f       	mov	r28, r16
     15e:	d1 2f       	mov	r29, r17
     160:	02 c0       	rjmp	.+4      	; 0x166 <serial_receive_string+0x52>
     162:	c0 2f       	mov	r28, r16
     164:	d1 2f       	mov	r29, r17
     166:	18 82       	st	Y, r1
     168:	df 91       	pop	r29
     16a:	cf 91       	pop	r28
     16c:	1f 91       	pop	r17
     16e:	0f 91       	pop	r16
     170:	ff 90       	pop	r15
     172:	ef 90       	pop	r14
     174:	08 95       	ret

00000176 <enable_steppers>:
     176:	5e 98       	cbi	0x0b, 6	; 11
     178:	15 98       	cbi	0x02, 5	; 2
     17a:	08 95       	ret

0000017c <disable_steppers>:
     17c:	5e 9a       	sbi	0x0b, 6	; 11
     17e:	15 9a       	sbi	0x02, 5	; 2
     180:	08 95       	ret

00000182 <stepper_init>:
     182:	56 9a       	sbi	0x0a, 6	; 10
     184:	0d 9a       	sbi	0x01, 5	; 1
     186:	fa df       	rcall	.-12     	; 0x17c <disable_steppers>
     188:	3d 9a       	sbi	0x07, 5	; 7
     18a:	57 9a       	sbi	0x0a, 7	; 10
     18c:	45 98       	cbi	0x08, 5	; 8
     18e:	5f 98       	cbi	0x0b, 7	; 11
     190:	3f 9a       	sbi	0x07, 7	; 7
     192:	3e 9a       	sbi	0x07, 6	; 7
     194:	47 98       	cbi	0x08, 7	; 8
     196:	46 98       	cbi	0x08, 6	; 8
     198:	22 9a       	sbi	0x04, 2	; 4
     19a:	23 9a       	sbi	0x04, 3	; 4
     19c:	2a 98       	cbi	0x05, 2	; 5
     19e:	2b 98       	cbi	0x05, 3	; 5
     1a0:	08 95       	ret

000001a2 <set_X_direction>:
     1a2:	88 23       	and	r24, r24
     1a4:	11 f0       	breq	.+4      	; 0x1aa <set_X_direction+0x8>
     1a6:	45 98       	cbi	0x08, 5	; 8
     1a8:	08 95       	ret
     1aa:	45 9a       	sbi	0x08, 5	; 8
     1ac:	08 95       	ret

000001ae <step_X>:
     1ae:	5f 9a       	sbi	0x0b, 7	; 11
     1b0:	00 97       	sbiw	r24, 0x00	; 0
     1b2:	b1 f0       	breq	.+44     	; 0x1e0 <step_X+0x32>
     1b4:	20 e0       	ldi	r18, 0x00	; 0
     1b6:	30 e0       	ldi	r19, 0x00	; 0
     1b8:	41 e2       	ldi	r20, 0x21	; 33
     1ba:	4a 95       	dec	r20
     1bc:	f1 f7       	brne	.-4      	; 0x1ba <step_X+0xc>
     1be:	00 00       	nop
     1c0:	2f 5f       	subi	r18, 0xFF	; 255
     1c2:	3f 4f       	sbci	r19, 0xFF	; 255
     1c4:	28 17       	cp	r18, r24
     1c6:	39 07       	cpc	r19, r25
     1c8:	b9 f7       	brne	.-18     	; 0x1b8 <step_X+0xa>
     1ca:	0c c0       	rjmp	.+24     	; 0x1e4 <step_X+0x36>
     1cc:	41 e2       	ldi	r20, 0x21	; 33
     1ce:	4a 95       	dec	r20
     1d0:	f1 f7       	brne	.-4      	; 0x1ce <step_X+0x20>
     1d2:	00 00       	nop
     1d4:	2f 5f       	subi	r18, 0xFF	; 255
     1d6:	3f 4f       	sbci	r19, 0xFF	; 255
     1d8:	28 17       	cp	r18, r24
     1da:	39 07       	cpc	r19, r25
     1dc:	b9 f7       	brne	.-18     	; 0x1cc <step_X+0x1e>
     1de:	08 95       	ret
     1e0:	5f 98       	cbi	0x0b, 7	; 11
     1e2:	08 95       	ret
     1e4:	5f 98       	cbi	0x0b, 7	; 11
     1e6:	20 e0       	ldi	r18, 0x00	; 0
     1e8:	30 e0       	ldi	r19, 0x00	; 0
     1ea:	f0 cf       	rjmp	.-32     	; 0x1cc <step_X+0x1e>

000001ec <set_Y_direction>:
     1ec:	88 23       	and	r24, r24
     1ee:	11 f0       	breq	.+4      	; 0x1f4 <set_Y_direction+0x8>
     1f0:	47 98       	cbi	0x08, 7	; 8
     1f2:	08 95       	ret
     1f4:	47 9a       	sbi	0x08, 7	; 8
     1f6:	08 95       	ret

000001f8 <step_Y>:
     1f8:	46 9a       	sbi	0x08, 6	; 8
     1fa:	00 97       	sbiw	r24, 0x00	; 0
     1fc:	b1 f0       	breq	.+44     	; 0x22a <step_Y+0x32>
     1fe:	20 e0       	ldi	r18, 0x00	; 0
     200:	30 e0       	ldi	r19, 0x00	; 0
     202:	41 e2       	ldi	r20, 0x21	; 33
     204:	4a 95       	dec	r20
     206:	f1 f7       	brne	.-4      	; 0x204 <step_Y+0xc>
     208:	00 00       	nop
     20a:	2f 5f       	subi	r18, 0xFF	; 255
     20c:	3f 4f       	sbci	r19, 0xFF	; 255
     20e:	28 17       	cp	r18, r24
     210:	39 07       	cpc	r19, r25
     212:	b9 f7       	brne	.-18     	; 0x202 <step_Y+0xa>
     214:	0c c0       	rjmp	.+24     	; 0x22e <step_Y+0x36>
     216:	41 e2       	ldi	r20, 0x21	; 33
     218:	4a 95       	dec	r20
     21a:	f1 f7       	brne	.-4      	; 0x218 <step_Y+0x20>
     21c:	00 00       	nop
     21e:	2f 5f       	subi	r18, 0xFF	; 255
     220:	3f 4f       	sbci	r19, 0xFF	; 255
     222:	28 17       	cp	r18, r24
     224:	39 07       	cpc	r19, r25
     226:	b9 f7       	brne	.-18     	; 0x216 <step_Y+0x1e>
     228:	08 95       	ret
     22a:	46 98       	cbi	0x08, 6	; 8
     22c:	08 95       	ret
     22e:	46 98       	cbi	0x08, 6	; 8
     230:	20 e0       	ldi	r18, 0x00	; 0
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	f0 cf       	rjmp	.-32     	; 0x216 <step_Y+0x1e>

00000236 <set_Z_direction>:
     236:	88 23       	and	r24, r24
     238:	11 f0       	breq	.+4      	; 0x23e <set_Z_direction+0x8>
     23a:	2a 98       	cbi	0x05, 2	; 5
     23c:	08 95       	ret
     23e:	2a 9a       	sbi	0x05, 2	; 5
     240:	08 95       	ret

00000242 <step_Z>:
     242:	2b 9a       	sbi	0x05, 3	; 5
     244:	00 97       	sbiw	r24, 0x00	; 0
     246:	b1 f0       	breq	.+44     	; 0x274 <step_Z+0x32>
     248:	20 e0       	ldi	r18, 0x00	; 0
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	41 e2       	ldi	r20, 0x21	; 33
     24e:	4a 95       	dec	r20
     250:	f1 f7       	brne	.-4      	; 0x24e <step_Z+0xc>
     252:	00 00       	nop
     254:	2f 5f       	subi	r18, 0xFF	; 255
     256:	3f 4f       	sbci	r19, 0xFF	; 255
     258:	28 17       	cp	r18, r24
     25a:	39 07       	cpc	r19, r25
     25c:	b9 f7       	brne	.-18     	; 0x24c <step_Z+0xa>
     25e:	0c c0       	rjmp	.+24     	; 0x278 <step_Z+0x36>
     260:	41 e2       	ldi	r20, 0x21	; 33
     262:	4a 95       	dec	r20
     264:	f1 f7       	brne	.-4      	; 0x262 <step_Z+0x20>
     266:	00 00       	nop
     268:	2f 5f       	subi	r18, 0xFF	; 255
     26a:	3f 4f       	sbci	r19, 0xFF	; 255
     26c:	28 17       	cp	r18, r24
     26e:	39 07       	cpc	r19, r25
     270:	b9 f7       	brne	.-18     	; 0x260 <step_Z+0x1e>
     272:	08 95       	ret
     274:	2b 98       	cbi	0x05, 3	; 5
     276:	08 95       	ret
     278:	2b 98       	cbi	0x05, 3	; 5
     27a:	20 e0       	ldi	r18, 0x00	; 0
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	f0 cf       	rjmp	.-32     	; 0x260 <step_Z+0x1e>

00000280 <endstop_init>:
     280:	3a 98       	cbi	0x07, 2	; 7
     282:	3b 98       	cbi	0x07, 3	; 7
     284:	3c 98       	cbi	0x07, 4	; 7
     286:	08 95       	ret

00000288 <x_endstop>:
     288:	86 b1       	in	r24, 0x06	; 6
     28a:	82 fb       	bst	r24, 2
     28c:	88 27       	eor	r24, r24
     28e:	80 f9       	bld	r24, 0
     290:	91 e0       	ldi	r25, 0x01	; 1
     292:	89 27       	eor	r24, r25
     294:	08 95       	ret

00000296 <y_endstop>:
     296:	86 b1       	in	r24, 0x06	; 6
     298:	83 fb       	bst	r24, 3
     29a:	88 27       	eor	r24, r24
     29c:	80 f9       	bld	r24, 0
     29e:	91 e0       	ldi	r25, 0x01	; 1
     2a0:	89 27       	eor	r24, r25
     2a2:	08 95       	ret

000002a4 <z_endstop>:
     2a4:	86 b1       	in	r24, 0x06	; 6
     2a6:	82 95       	swap	r24
     2a8:	81 70       	andi	r24, 0x01	; 1
     2aa:	91 e0       	ldi	r25, 0x01	; 1
     2ac:	89 27       	eor	r24, r25
     2ae:	08 95       	ret

000002b0 <any_endstop>:
     2b0:	eb df       	rcall	.-42     	; 0x288 <x_endstop>
     2b2:	81 11       	cpse	r24, r1
     2b4:	0a c0       	rjmp	.+20     	; 0x2ca <any_endstop+0x1a>
     2b6:	ef df       	rcall	.-34     	; 0x296 <y_endstop>
     2b8:	81 11       	cpse	r24, r1
     2ba:	09 c0       	rjmp	.+18     	; 0x2ce <any_endstop+0x1e>
     2bc:	f3 df       	rcall	.-26     	; 0x2a4 <z_endstop>
     2be:	91 e0       	ldi	r25, 0x01	; 1
     2c0:	81 11       	cpse	r24, r1
     2c2:	01 c0       	rjmp	.+2      	; 0x2c6 <any_endstop+0x16>
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	89 2f       	mov	r24, r25
     2c8:	08 95       	ret
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	08 95       	ret
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	08 95       	ret

000002d2 <linear_motion>:
     2d2:	2f 92       	push	r2
     2d4:	3f 92       	push	r3
     2d6:	4f 92       	push	r4
     2d8:	5f 92       	push	r5
     2da:	6f 92       	push	r6
     2dc:	7f 92       	push	r7
     2de:	8f 92       	push	r8
     2e0:	9f 92       	push	r9
     2e2:	af 92       	push	r10
     2e4:	bf 92       	push	r11
     2e6:	cf 92       	push	r12
     2e8:	df 92       	push	r13
     2ea:	ef 92       	push	r14
     2ec:	ff 92       	push	r15
     2ee:	0f 93       	push	r16
     2f0:	1f 93       	push	r17
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	cd b7       	in	r28, 0x3d	; 61
     2f8:	de b7       	in	r29, 0x3e	; 62
     2fa:	a4 97       	sbiw	r28, 0x24	; 36
     2fc:	0f b6       	in	r0, 0x3f	; 63
     2fe:	f8 94       	cli
     300:	de bf       	out	0x3e, r29	; 62
     302:	0f be       	out	0x3f, r0	; 63
     304:	cd bf       	out	0x3d, r28	; 61
     306:	4b 01       	movw	r8, r22
     308:	5c 01       	movw	r10, r24
     30a:	29 8f       	std	Y+25, r18	; 0x19
     30c:	3a 8f       	std	Y+26, r19	; 0x1a
     30e:	4b 8f       	std	Y+27, r20	; 0x1b
     310:	5c 8f       	std	Y+28, r21	; 0x1c
     312:	ed 8e       	std	Y+29, r14	; 0x1d
     314:	fe 8e       	std	Y+30, r15	; 0x1e
     316:	0f 8f       	std	Y+31, r16	; 0x1f
     318:	18 a3       	std	Y+32, r17	; 0x20
     31a:	20 e0       	ldi	r18, 0x00	; 0
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	48 ec       	ldi	r20, 0xC8	; 200
     320:	52 e4       	ldi	r21, 0x42	; 66
     322:	b0 d5       	rcall	.+2912   	; 0xe84 <__mulsf3>
     324:	9f d4       	rcall	.+2366   	; 0xc64 <__fixsfsi>
     326:	9b 01       	movw	r18, r22
     328:	77 23       	and	r23, r23
     32a:	24 f4       	brge	.+8      	; 0x334 <linear_motion+0x62>
     32c:	22 27       	eor	r18, r18
     32e:	33 27       	eor	r19, r19
     330:	26 1b       	sub	r18, r22
     332:	37 0b       	sbc	r19, r23
     334:	c9 01       	movw	r24, r18
     336:	33 0f       	add	r19, r19
     338:	aa 0b       	sbc	r26, r26
     33a:	bb 0b       	sbc	r27, r27
     33c:	8d 87       	std	Y+13, r24	; 0x0d
     33e:	9e 87       	std	Y+14, r25	; 0x0e
     340:	af 87       	std	Y+15, r26	; 0x0f
     342:	b8 8b       	std	Y+16, r27	; 0x10
     344:	20 e0       	ldi	r18, 0x00	; 0
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	48 ec       	ldi	r20, 0xC8	; 200
     34a:	52 e4       	ldi	r21, 0x42	; 66
     34c:	69 8d       	ldd	r22, Y+25	; 0x19
     34e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     350:	8b 8d       	ldd	r24, Y+27	; 0x1b
     352:	9c 8d       	ldd	r25, Y+28	; 0x1c
     354:	97 d5       	rcall	.+2862   	; 0xe84 <__mulsf3>
     356:	86 d4       	rcall	.+2316   	; 0xc64 <__fixsfsi>
     358:	9b 01       	movw	r18, r22
     35a:	77 23       	and	r23, r23
     35c:	24 f4       	brge	.+8      	; 0x366 <linear_motion+0x94>
     35e:	22 27       	eor	r18, r18
     360:	33 27       	eor	r19, r19
     362:	26 1b       	sub	r18, r22
     364:	37 0b       	sbc	r19, r23
     366:	c9 01       	movw	r24, r18
     368:	33 0f       	add	r19, r19
     36a:	aa 0b       	sbc	r26, r26
     36c:	bb 0b       	sbc	r27, r27
     36e:	89 8b       	std	Y+17, r24	; 0x11
     370:	9a 8b       	std	Y+18, r25	; 0x12
     372:	ab 8b       	std	Y+19, r26	; 0x13
     374:	bc 8b       	std	Y+20, r27	; 0x14
     376:	20 e0       	ldi	r18, 0x00	; 0
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	48 e4       	ldi	r20, 0x48	; 72
     37c:	53 e4       	ldi	r21, 0x43	; 67
     37e:	6d 8d       	ldd	r22, Y+29	; 0x1d
     380:	7e 8d       	ldd	r23, Y+30	; 0x1e
     382:	8f 8d       	ldd	r24, Y+31	; 0x1f
     384:	98 a1       	ldd	r25, Y+32	; 0x20
     386:	7e d5       	rcall	.+2812   	; 0xe84 <__mulsf3>
     388:	6d d4       	rcall	.+2266   	; 0xc64 <__fixsfsi>
     38a:	6b 01       	movw	r12, r22
     38c:	77 23       	and	r23, r23
     38e:	24 f4       	brge	.+8      	; 0x398 <linear_motion+0xc6>
     390:	cc 24       	eor	r12, r12
     392:	dd 24       	eor	r13, r13
     394:	c6 1a       	sub	r12, r22
     396:	d7 0a       	sbc	r13, r23
     398:	0d 2c       	mov	r0, r13
     39a:	00 0c       	add	r0, r0
     39c:	ee 08       	sbc	r14, r14
     39e:	ff 08       	sbc	r15, r15
     3a0:	cd 8a       	std	Y+21, r12	; 0x15
     3a2:	de 8a       	std	Y+22, r13	; 0x16
     3a4:	ef 8a       	std	Y+23, r14	; 0x17
     3a6:	f8 8e       	std	Y+24, r15	; 0x18
     3a8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
     3ac:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
     3b0:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <_edata+0x2>
     3b4:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <_edata+0x3>
     3b8:	c5 01       	movw	r24, r10
     3ba:	b4 01       	movw	r22, r8
     3bc:	83 d3       	rcall	.+1798   	; 0xac4 <__addsf3>
     3be:	2b 01       	movw	r4, r22
     3c0:	3c 01       	movw	r6, r24
     3c2:	20 e0       	ldi	r18, 0x00	; 0
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	48 e4       	ldi	r20, 0x48	; 72
     3c8:	53 ec       	ldi	r21, 0xC3	; 195
     3ca:	e0 d3       	rcall	.+1984   	; 0xb8c <__cmpsf2>
     3cc:	88 23       	and	r24, r24
     3ce:	0c f4       	brge	.+2      	; 0x3d2 <linear_motion+0x100>
     3d0:	40 c1       	rjmp	.+640    	; 0x652 <__FUSE_REGION_LENGTH__+0x252>
     3d2:	20 e0       	ldi	r18, 0x00	; 0
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	a9 01       	movw	r20, r18
     3d8:	c3 01       	movw	r24, r6
     3da:	b2 01       	movw	r22, r4
     3dc:	4f d5       	rcall	.+2718   	; 0xe7c <__gesf2>
     3de:	18 16       	cp	r1, r24
     3e0:	0c f4       	brge	.+2      	; 0x3e4 <linear_motion+0x112>
     3e2:	37 c1       	rjmp	.+622    	; 0x652 <__FUSE_REGION_LENGTH__+0x252>
     3e4:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <_edata+0x4>
     3e8:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <_edata+0x5>
     3ec:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <_edata+0x6>
     3f0:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <_edata+0x7>
     3f4:	69 8d       	ldd	r22, Y+25	; 0x19
     3f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     3f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     3fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
     3fc:	63 d3       	rcall	.+1734   	; 0xac4 <__addsf3>
     3fe:	2b 01       	movw	r4, r22
     400:	3c 01       	movw	r6, r24
     402:	20 e0       	ldi	r18, 0x00	; 0
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	48 e4       	ldi	r20, 0x48	; 72
     408:	53 e4       	ldi	r21, 0x43	; 67
     40a:	38 d5       	rcall	.+2672   	; 0xe7c <__gesf2>
     40c:	18 16       	cp	r1, r24
     40e:	0c f4       	brge	.+2      	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
     410:	20 c1       	rjmp	.+576    	; 0x652 <__FUSE_REGION_LENGTH__+0x252>
     412:	20 e0       	ldi	r18, 0x00	; 0
     414:	30 e0       	ldi	r19, 0x00	; 0
     416:	a9 01       	movw	r20, r18
     418:	c3 01       	movw	r24, r6
     41a:	b2 01       	movw	r22, r4
     41c:	b7 d3       	rcall	.+1902   	; 0xb8c <__cmpsf2>
     41e:	88 23       	and	r24, r24
     420:	0c f4       	brge	.+2      	; 0x424 <__FUSE_REGION_LENGTH__+0x24>
     422:	17 c1       	rjmp	.+558    	; 0x652 <__FUSE_REGION_LENGTH__+0x252>
     424:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <_edata+0x8>
     428:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <_edata+0x9>
     42c:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <_edata+0xa>
     430:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <_edata+0xb>
     434:	6d 8d       	ldd	r22, Y+29	; 0x1d
     436:	7e 8d       	ldd	r23, Y+30	; 0x1e
     438:	8f 8d       	ldd	r24, Y+31	; 0x1f
     43a:	98 a1       	ldd	r25, Y+32	; 0x20
     43c:	43 d3       	rcall	.+1670   	; 0xac4 <__addsf3>
     43e:	2b 01       	movw	r4, r22
     440:	3c 01       	movw	r6, r24
     442:	20 e0       	ldi	r18, 0x00	; 0
     444:	30 e0       	ldi	r19, 0x00	; 0
     446:	4a e7       	ldi	r20, 0x7A	; 122
     448:	53 e4       	ldi	r21, 0x43	; 67
     44a:	18 d5       	rcall	.+2608   	; 0xe7c <__gesf2>
     44c:	18 16       	cp	r1, r24
     44e:	0c f4       	brge	.+2      	; 0x452 <__FUSE_REGION_LENGTH__+0x52>
     450:	00 c1       	rjmp	.+512    	; 0x652 <__FUSE_REGION_LENGTH__+0x252>
     452:	20 e0       	ldi	r18, 0x00	; 0
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	a9 01       	movw	r20, r18
     458:	c3 01       	movw	r24, r6
     45a:	b2 01       	movw	r22, r4
     45c:	97 d3       	rcall	.+1838   	; 0xb8c <__cmpsf2>
     45e:	88 23       	and	r24, r24
     460:	0c f4       	brge	.+2      	; 0x464 <__FUSE_REGION_LENGTH__+0x64>
     462:	f7 c0       	rjmp	.+494    	; 0x652 <__FUSE_REGION_LENGTH__+0x252>
     464:	49 89       	ldd	r20, Y+17	; 0x11
     466:	5a 89       	ldd	r21, Y+18	; 0x12
     468:	6b 89       	ldd	r22, Y+19	; 0x13
     46a:	7c 89       	ldd	r23, Y+20	; 0x14
     46c:	8d 85       	ldd	r24, Y+13	; 0x0d
     46e:	9e 85       	ldd	r25, Y+14	; 0x0e
     470:	af 85       	ldd	r26, Y+15	; 0x0f
     472:	b8 89       	ldd	r27, Y+16	; 0x10
     474:	84 17       	cp	r24, r20
     476:	95 07       	cpc	r25, r21
     478:	a6 07       	cpc	r26, r22
     47a:	b7 07       	cpc	r27, r23
     47c:	10 f4       	brcc	.+4      	; 0x482 <__FUSE_REGION_LENGTH__+0x82>
     47e:	db 01       	movw	r26, r22
     480:	ca 01       	movw	r24, r20
     482:	26 01       	movw	r4, r12
     484:	37 01       	movw	r6, r14
     486:	c8 16       	cp	r12, r24
     488:	d9 06       	cpc	r13, r25
     48a:	ea 06       	cpc	r14, r26
     48c:	fb 06       	cpc	r15, r27
     48e:	10 f4       	brcc	.+4      	; 0x494 <__FUSE_REGION_LENGTH__+0x94>
     490:	2c 01       	movw	r4, r24
     492:	3d 01       	movw	r6, r26
     494:	d3 01       	movw	r26, r6
     496:	c2 01       	movw	r24, r4
     498:	b6 95       	lsr	r27
     49a:	a7 95       	ror	r26
     49c:	97 95       	ror	r25
     49e:	87 95       	ror	r24
     4a0:	89 83       	std	Y+1, r24	; 0x01
     4a2:	9a 83       	std	Y+2, r25	; 0x02
     4a4:	ab 83       	std	Y+3, r26	; 0x03
     4a6:	bc 83       	std	Y+4, r27	; 0x04
     4a8:	8d 83       	std	Y+5, r24	; 0x05
     4aa:	9e 83       	std	Y+6, r25	; 0x06
     4ac:	af 83       	std	Y+7, r26	; 0x07
     4ae:	b8 87       	std	Y+8, r27	; 0x08
     4b0:	89 87       	std	Y+9, r24	; 0x09
     4b2:	9a 87       	std	Y+10, r25	; 0x0a
     4b4:	ab 87       	std	Y+11, r26	; 0x0b
     4b6:	bc 87       	std	Y+12, r27	; 0x0c
     4b8:	5e de       	rcall	.-836    	; 0x176 <enable_steppers>
     4ba:	11 e0       	ldi	r17, 0x01	; 1
     4bc:	20 e0       	ldi	r18, 0x00	; 0
     4be:	30 e0       	ldi	r19, 0x00	; 0
     4c0:	a9 01       	movw	r20, r18
     4c2:	c5 01       	movw	r24, r10
     4c4:	b4 01       	movw	r22, r8
     4c6:	da d4       	rcall	.+2484   	; 0xe7c <__gesf2>
     4c8:	18 16       	cp	r1, r24
     4ca:	0c f0       	brlt	.+2      	; 0x4ce <__FUSE_REGION_LENGTH__+0xce>
     4cc:	10 e0       	ldi	r17, 0x00	; 0
     4ce:	81 2f       	mov	r24, r17
     4d0:	68 de       	rcall	.-816    	; 0x1a2 <set_X_direction>
     4d2:	11 e0       	ldi	r17, 0x01	; 1
     4d4:	20 e0       	ldi	r18, 0x00	; 0
     4d6:	30 e0       	ldi	r19, 0x00	; 0
     4d8:	a9 01       	movw	r20, r18
     4da:	69 8d       	ldd	r22, Y+25	; 0x19
     4dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     4de:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     4e2:	cc d4       	rcall	.+2456   	; 0xe7c <__gesf2>
     4e4:	18 16       	cp	r1, r24
     4e6:	0c f0       	brlt	.+2      	; 0x4ea <__FUSE_REGION_LENGTH__+0xea>
     4e8:	10 e0       	ldi	r17, 0x00	; 0
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	81 27       	eor	r24, r17
     4ee:	7e de       	rcall	.-772    	; 0x1ec <set_Y_direction>
     4f0:	11 e0       	ldi	r17, 0x01	; 1
     4f2:	20 e0       	ldi	r18, 0x00	; 0
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	a9 01       	movw	r20, r18
     4f8:	6d 8d       	ldd	r22, Y+29	; 0x1d
     4fa:	7e 8d       	ldd	r23, Y+30	; 0x1e
     4fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
     4fe:	98 a1       	ldd	r25, Y+32	; 0x20
     500:	bd d4       	rcall	.+2426   	; 0xe7c <__gesf2>
     502:	18 16       	cp	r1, r24
     504:	0c f0       	brlt	.+2      	; 0x508 <__FUSE_REGION_LENGTH__+0x108>
     506:	10 e0       	ldi	r17, 0x00	; 0
     508:	81 2f       	mov	r24, r17
     50a:	95 de       	rcall	.-726    	; 0x236 <set_Z_direction>
     50c:	41 14       	cp	r4, r1
     50e:	51 04       	cpc	r5, r1
     510:	61 04       	cpc	r6, r1
     512:	71 04       	cpc	r7, r1
     514:	09 f0       	breq	.+2      	; 0x518 <__FUSE_REGION_LENGTH__+0x118>
     516:	59 c0       	rjmp	.+178    	; 0x5ca <__FUSE_REGION_LENGTH__+0x1ca>
     518:	6b c0       	rjmp	.+214    	; 0x5f0 <__FUSE_REGION_LENGTH__+0x1f0>
     51a:	0c 5f       	subi	r16, 0xFC	; 252
     51c:	1f 4f       	sbci	r17, 0xFF	; 255
     51e:	83 94       	inc	r8
     520:	93 94       	inc	r9
     522:	f5 01       	movw	r30, r10
     524:	41 91       	ld	r20, Z+
     526:	51 91       	ld	r21, Z+
     528:	61 91       	ld	r22, Z+
     52a:	71 91       	ld	r23, Z+
     52c:	5f 01       	movw	r10, r30
     52e:	f8 01       	movw	r30, r16
     530:	80 81       	ld	r24, Z
     532:	91 81       	ldd	r25, Z+1	; 0x01
     534:	a2 81       	ldd	r26, Z+2	; 0x02
     536:	b3 81       	ldd	r27, Z+3	; 0x03
     538:	84 0f       	add	r24, r20
     53a:	95 1f       	adc	r25, r21
     53c:	a6 1f       	adc	r26, r22
     53e:	b7 1f       	adc	r27, r23
     540:	84 15       	cp	r24, r4
     542:	95 05       	cpc	r25, r5
     544:	a6 05       	cpc	r26, r6
     546:	b7 05       	cpc	r27, r7
     548:	28 f1       	brcs	.+74     	; 0x594 <__FUSE_REGION_LENGTH__+0x194>
     54a:	84 19       	sub	r24, r4
     54c:	95 09       	sbc	r25, r5
     54e:	a6 09       	sbc	r26, r6
     550:	b7 09       	sbc	r27, r7
     552:	80 83       	st	Z, r24
     554:	91 83       	std	Z+1, r25	; 0x01
     556:	a2 83       	std	Z+2, r26	; 0x02
     558:	b3 83       	std	Z+3, r27	; 0x03
     55a:	91 10       	cpse	r9, r1
     55c:	06 c0       	rjmp	.+12     	; 0x56a <__FUSE_REGION_LENGTH__+0x16a>
     55e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <speed+0x4>
     562:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <speed+0x5>
     566:	23 de       	rcall	.-954    	; 0x1ae <step_X>
     568:	70 c0       	rjmp	.+224    	; 0x64a <__FUSE_REGION_LENGTH__+0x24a>
     56a:	f1 e0       	ldi	r31, 0x01	; 1
     56c:	9f 12       	cpse	r9, r31
     56e:	06 c0       	rjmp	.+12     	; 0x57c <__FUSE_REGION_LENGTH__+0x17c>
     570:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <speed+0x6>
     574:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <speed+0x7>
     578:	3f de       	rcall	.-898    	; 0x1f8 <step_Y>
     57a:	67 c0       	rjmp	.+206    	; 0x64a <__FUSE_REGION_LENGTH__+0x24a>
     57c:	82 e0       	ldi	r24, 0x02	; 2
     57e:	98 12       	cpse	r9, r24
     580:	0e c0       	rjmp	.+28     	; 0x59e <__FUSE_REGION_LENGTH__+0x19e>
     582:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <speed+0x8>
     586:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <speed+0x9>
     58a:	5b de       	rcall	.-842    	; 0x242 <step_Z>
     58c:	91 de       	rcall	.-734    	; 0x2b0 <any_endstop>
     58e:	88 23       	and	r24, r24
     590:	69 f0       	breq	.+26     	; 0x5ac <__FUSE_REGION_LENGTH__+0x1ac>
     592:	5f c0       	rjmp	.+190    	; 0x652 <__FUSE_REGION_LENGTH__+0x252>
     594:	f8 01       	movw	r30, r16
     596:	80 83       	st	Z, r24
     598:	91 83       	std	Z+1, r25	; 0x01
     59a:	a2 83       	std	Z+2, r26	; 0x02
     59c:	b3 83       	std	Z+3, r27	; 0x03
     59e:	88 de       	rcall	.-752    	; 0x2b0 <any_endstop>
     5a0:	81 11       	cpse	r24, r1
     5a2:	57 c0       	rjmp	.+174    	; 0x652 <__FUSE_REGION_LENGTH__+0x252>
     5a4:	f2 e0       	ldi	r31, 0x02	; 2
     5a6:	f8 15       	cp	r31, r8
     5a8:	08 f0       	brcs	.+2      	; 0x5ac <__FUSE_REGION_LENGTH__+0x1ac>
     5aa:	b7 cf       	rjmp	.-146    	; 0x51a <__FUSE_REGION_LENGTH__+0x11a>
     5ac:	8f ef       	ldi	r24, 0xFF	; 255
     5ae:	c8 1a       	sub	r12, r24
     5b0:	d8 0a       	sbc	r13, r24
     5b2:	e8 0a       	sbc	r14, r24
     5b4:	f8 0a       	sbc	r15, r24
     5b6:	c4 14       	cp	r12, r4
     5b8:	d5 04       	cpc	r13, r5
     5ba:	e6 04       	cpc	r14, r6
     5bc:	f7 04       	cpc	r15, r7
     5be:	79 f4       	brne	.+30     	; 0x5de <__FUSE_REGION_LENGTH__+0x1de>
     5c0:	89 a0       	ldd	r8, Y+33	; 0x21
     5c2:	9a a0       	ldd	r9, Y+34	; 0x22
     5c4:	ab a0       	ldd	r10, Y+35	; 0x23
     5c6:	bc a0       	ldd	r11, Y+36	; 0x24
     5c8:	13 c0       	rjmp	.+38     	; 0x5f0 <__FUSE_REGION_LENGTH__+0x1f0>
     5ca:	c1 2c       	mov	r12, r1
     5cc:	d1 2c       	mov	r13, r1
     5ce:	76 01       	movw	r14, r12
     5d0:	21 2c       	mov	r2, r1
     5d2:	33 24       	eor	r3, r3
     5d4:	33 94       	inc	r3
     5d6:	89 a2       	std	Y+33, r8	; 0x21
     5d8:	9a a2       	std	Y+34, r9	; 0x22
     5da:	ab a2       	std	Y+35, r10	; 0x23
     5dc:	bc a2       	std	Y+36, r11	; 0x24
     5de:	8e 01       	movw	r16, r28
     5e0:	0f 5f       	subi	r16, 0xFF	; 255
     5e2:	1f 4f       	sbci	r17, 0xFF	; 255
     5e4:	fe 01       	movw	r30, r28
     5e6:	3d 96       	adiw	r30, 0x0d	; 13
     5e8:	5f 01       	movw	r10, r30
     5ea:	92 2c       	mov	r9, r2
     5ec:	83 2c       	mov	r8, r3
     5ee:	99 cf       	rjmp	.-206    	; 0x522 <__FUSE_REGION_LENGTH__+0x122>
     5f0:	c5 dd       	rcall	.-1142   	; 0x17c <disable_steppers>
     5f2:	00 e0       	ldi	r16, 0x00	; 0
     5f4:	11 e0       	ldi	r17, 0x01	; 1
     5f6:	a5 01       	movw	r20, r10
     5f8:	94 01       	movw	r18, r8
     5fa:	f8 01       	movw	r30, r16
     5fc:	60 81       	ld	r22, Z
     5fe:	71 81       	ldd	r23, Z+1	; 0x01
     600:	82 81       	ldd	r24, Z+2	; 0x02
     602:	93 81       	ldd	r25, Z+3	; 0x03
     604:	5f d2       	rcall	.+1214   	; 0xac4 <__addsf3>
     606:	f8 01       	movw	r30, r16
     608:	60 83       	st	Z, r22
     60a:	71 83       	std	Z+1, r23	; 0x01
     60c:	82 83       	std	Z+2, r24	; 0x02
     60e:	93 83       	std	Z+3, r25	; 0x03
     610:	29 8d       	ldd	r18, Y+25	; 0x19
     612:	3a 8d       	ldd	r19, Y+26	; 0x1a
     614:	4b 8d       	ldd	r20, Y+27	; 0x1b
     616:	5c 8d       	ldd	r21, Y+28	; 0x1c
     618:	64 81       	ldd	r22, Z+4	; 0x04
     61a:	75 81       	ldd	r23, Z+5	; 0x05
     61c:	86 81       	ldd	r24, Z+6	; 0x06
     61e:	97 81       	ldd	r25, Z+7	; 0x07
     620:	51 d2       	rcall	.+1186   	; 0xac4 <__addsf3>
     622:	f8 01       	movw	r30, r16
     624:	64 83       	std	Z+4, r22	; 0x04
     626:	75 83       	std	Z+5, r23	; 0x05
     628:	86 83       	std	Z+6, r24	; 0x06
     62a:	97 83       	std	Z+7, r25	; 0x07
     62c:	2d 8d       	ldd	r18, Y+29	; 0x1d
     62e:	3e 8d       	ldd	r19, Y+30	; 0x1e
     630:	4f 8d       	ldd	r20, Y+31	; 0x1f
     632:	58 a1       	ldd	r21, Y+32	; 0x20
     634:	60 85       	ldd	r22, Z+8	; 0x08
     636:	71 85       	ldd	r23, Z+9	; 0x09
     638:	82 85       	ldd	r24, Z+10	; 0x0a
     63a:	93 85       	ldd	r25, Z+11	; 0x0b
     63c:	43 d2       	rcall	.+1158   	; 0xac4 <__addsf3>
     63e:	f8 01       	movw	r30, r16
     640:	60 87       	std	Z+8, r22	; 0x08
     642:	71 87       	std	Z+9, r23	; 0x09
     644:	82 87       	std	Z+10, r24	; 0x0a
     646:	93 87       	std	Z+11, r25	; 0x0b
     648:	04 c0       	rjmp	.+8      	; 0x652 <__FUSE_REGION_LENGTH__+0x252>
     64a:	32 de       	rcall	.-924    	; 0x2b0 <any_endstop>
     64c:	88 23       	and	r24, r24
     64e:	09 f4       	brne	.+2      	; 0x652 <__FUSE_REGION_LENGTH__+0x252>
     650:	64 cf       	rjmp	.-312    	; 0x51a <__FUSE_REGION_LENGTH__+0x11a>
     652:	a4 96       	adiw	r28, 0x24	; 36
     654:	0f b6       	in	r0, 0x3f	; 63
     656:	f8 94       	cli
     658:	de bf       	out	0x3e, r29	; 62
     65a:	0f be       	out	0x3f, r0	; 63
     65c:	cd bf       	out	0x3d, r28	; 61
     65e:	df 91       	pop	r29
     660:	cf 91       	pop	r28
     662:	1f 91       	pop	r17
     664:	0f 91       	pop	r16
     666:	ff 90       	pop	r15
     668:	ef 90       	pop	r14
     66a:	df 90       	pop	r13
     66c:	cf 90       	pop	r12
     66e:	bf 90       	pop	r11
     670:	af 90       	pop	r10
     672:	9f 90       	pop	r9
     674:	8f 90       	pop	r8
     676:	7f 90       	pop	r7
     678:	6f 90       	pop	r6
     67a:	5f 90       	pop	r5
     67c:	4f 90       	pop	r4
     67e:	3f 90       	pop	r3
     680:	2f 90       	pop	r2
     682:	08 95       	ret

00000684 <goto_Z_IDLE>:
     684:	ef 92       	push	r14
     686:	ff 92       	push	r15
     688:	0f 93       	push	r16
     68a:	1f 93       	push	r17
     68c:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <_edata+0x8>
     690:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <_edata+0x9>
     694:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <_edata+0xa>
     698:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <_edata+0xb>
     69c:	60 e0       	ldi	r22, 0x00	; 0
     69e:	70 e0       	ldi	r23, 0x00	; 0
     6a0:	8a e7       	ldi	r24, 0x7A	; 122
     6a2:	93 e4       	ldi	r25, 0x43	; 67
     6a4:	0e d2       	rcall	.+1052   	; 0xac2 <__subsf3>
     6a6:	7b 01       	movw	r14, r22
     6a8:	8c 01       	movw	r16, r24
     6aa:	20 e0       	ldi	r18, 0x00	; 0
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	a9 01       	movw	r20, r18
     6b0:	ca 01       	movw	r24, r20
     6b2:	b9 01       	movw	r22, r18
     6b4:	0e de       	rcall	.-996    	; 0x2d2 <linear_motion>
     6b6:	1f 91       	pop	r17
     6b8:	0f 91       	pop	r16
     6ba:	ff 90       	pop	r15
     6bc:	ef 90       	pop	r14
     6be:	08 95       	ret

000006c0 <dwell_milliseconds>:
     6c0:	00 97       	sbiw	r24, 0x00	; 0
     6c2:	69 f0       	breq	.+26     	; 0x6de <dwell_milliseconds+0x1e>
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	e9 ef       	ldi	r30, 0xF9	; 249
     6ca:	f0 e0       	ldi	r31, 0x00	; 0
     6cc:	31 97       	sbiw	r30, 0x01	; 1
     6ce:	f1 f7       	brne	.-4      	; 0x6cc <dwell_milliseconds+0xc>
     6d0:	00 c0       	rjmp	.+0      	; 0x6d2 <dwell_milliseconds+0x12>
     6d2:	00 00       	nop
     6d4:	2f 5f       	subi	r18, 0xFF	; 255
     6d6:	3f 4f       	sbci	r19, 0xFF	; 255
     6d8:	28 17       	cp	r18, r24
     6da:	39 07       	cpc	r19, r25
     6dc:	a9 f7       	brne	.-22     	; 0x6c8 <dwell_milliseconds+0x8>
     6de:	08 95       	ret

000006e0 <set_feedrate>:

// Set the general feed rate and calculate the delay between steps
// (Not perfectly precise when it comes to the actual delay between
// steps, because of rounding it could be up to 50 microseconds off)
void set_feedrate(float mm_min) {
     6e0:	cf 92       	push	r12
     6e2:	df 92       	push	r13
     6e4:	ef 92       	push	r14
     6e6:	ff 92       	push	r15
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	6b 01       	movw	r12, r22
     6ee:	7c 01       	movw	r14, r24
    if(mm_min != speed.feed_rate) {
     6f0:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <speed>
     6f4:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <speed+0x1>
     6f8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <speed+0x2>
     6fc:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <speed+0x3>
     700:	e2 d2       	rcall	.+1476   	; 0xcc6 <__floatunsisf>
     702:	a7 01       	movw	r20, r14
     704:	96 01       	movw	r18, r12
     706:	42 d2       	rcall	.+1156   	; 0xb8c <__cmpsf2>
     708:	88 23       	and	r24, r24
     70a:	09 f4       	brne	.+2      	; 0x70e <set_feedrate+0x2e>
     70c:	66 c0       	rjmp	.+204    	; 0x7da <set_feedrate+0xfa>
        // catch crazy values and keep the speed within a harmless range
        if(mm_min > MAX_FEEDRATE) { mm_min = MAX_FEEDRATE; }
     70e:	20 e0       	ldi	r18, 0x00	; 0
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	48 e4       	ldi	r20, 0x48	; 72
     714:	54 e4       	ldi	r21, 0x44	; 68
     716:	c7 01       	movw	r24, r14
     718:	b6 01       	movw	r22, r12
     71a:	b0 d3       	rcall	.+1888   	; 0xe7c <__gesf2>
     71c:	18 16       	cp	r1, r24
     71e:	94 f0       	brlt	.+36     	; 0x744 <set_feedrate+0x64>
        else if(mm_min < MIN_FEEDRATE) { mm_min = MIN_FEEDRATE; }
     720:	20 e0       	ldi	r18, 0x00	; 0
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	48 e4       	ldi	r20, 0x48	; 72
     726:	53 e4       	ldi	r21, 0x43	; 67
     728:	c7 01       	movw	r24, r14
     72a:	b6 01       	movw	r22, r12
     72c:	2f d2       	rcall	.+1118   	; 0xb8c <__cmpsf2>
     72e:	88 23       	and	r24, r24
     730:	8c f4       	brge	.+34     	; 0x754 <set_feedrate+0x74>
     732:	0f 2e       	mov	r0, r31
     734:	c1 2c       	mov	r12, r1
     736:	d1 2c       	mov	r13, r1
     738:	f8 e4       	ldi	r31, 0x48	; 72
     73a:	ef 2e       	mov	r14, r31
     73c:	f3 e4       	ldi	r31, 0x43	; 67
     73e:	ff 2e       	mov	r15, r31
     740:	f0 2d       	mov	r31, r0
     742:	08 c0       	rjmp	.+16     	; 0x754 <set_feedrate+0x74>
// (Not perfectly precise when it comes to the actual delay between
// steps, because of rounding it could be up to 50 microseconds off)
void set_feedrate(float mm_min) {
    if(mm_min != speed.feed_rate) {
        // catch crazy values and keep the speed within a harmless range
        if(mm_min > MAX_FEEDRATE) { mm_min = MAX_FEEDRATE; }
     744:	0f 2e       	mov	r0, r31
     746:	c1 2c       	mov	r12, r1
     748:	d1 2c       	mov	r13, r1
     74a:	f8 e4       	ldi	r31, 0x48	; 72
     74c:	ef 2e       	mov	r14, r31
     74e:	f4 e4       	ldi	r31, 0x44	; 68
     750:	ff 2e       	mov	r15, r31
     752:	f0 2d       	mov	r31, r0
        else if(mm_min < MIN_FEEDRATE) { mm_min = MIN_FEEDRATE; }
        // Get the "Steps-per-Millisecond" from the "Millimeters-per-Minute" parameter
        const float X_step_milli = (mm_min * X_STEPS_MM) / 60000.0f;
     754:	20 e0       	ldi	r18, 0x00	; 0
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	48 ec       	ldi	r20, 0xC8	; 200
     75a:	52 e4       	ldi	r21, 0x42	; 66
     75c:	c7 01       	movw	r24, r14
     75e:	b6 01       	movw	r22, r12
     760:	91 d3       	rcall	.+1826   	; 0xe84 <__mulsf3>
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	30 e6       	ldi	r19, 0x60	; 96
     766:	4a e6       	ldi	r20, 0x6A	; 106
     768:	57 e4       	ldi	r21, 0x47	; 71
     76a:	14 d2       	rcall	.+1064   	; 0xb94 <__divsf3>
     76c:	9b 01       	movw	r18, r22
     76e:	ac 01       	movw	r20, r24
        const float Z_step_milli = (mm_min * Z_STEPS_MM) / 60000.0f;
        // Calculate the delay for each axis
        // (1 / X_step_milli): gets the delay in milliseconds for one step
        // * 5: to get the count how often _delay_us(100); will be executed.
        // * 5: (and not * 10) because there are two delay loops for each step.
        speed.x_delay = (uint16)round((1 / X_step_milli) * 5);
     770:	60 e0       	ldi	r22, 0x00	; 0
     772:	70 e0       	ldi	r23, 0x00	; 0
     774:	80 e8       	ldi	r24, 0x80	; 128
     776:	9f e3       	ldi	r25, 0x3F	; 63
     778:	0d d2       	rcall	.+1050   	; 0xb94 <__divsf3>
     77a:	20 e0       	ldi	r18, 0x00	; 0
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	40 ea       	ldi	r20, 0xA0	; 160
     780:	50 e4       	ldi	r21, 0x40	; 64
     782:	80 d3       	rcall	.+1792   	; 0xe84 <__mulsf3>
     784:	e2 d3       	rcall	.+1988   	; 0xf4a <round>
     786:	73 d2       	rcall	.+1254   	; 0xc6e <__fixunssfsi>
     788:	c0 e1       	ldi	r28, 0x10	; 16
     78a:	d1 e0       	ldi	r29, 0x01	; 1
     78c:	7d 83       	std	Y+5, r23	; 0x05
     78e:	6c 83       	std	Y+4, r22	; 0x04
        speed.y_delay = (uint16)round((1 / Y_step_milli) * 5);
     790:	7f 83       	std	Y+7, r23	; 0x07
     792:	6e 83       	std	Y+6, r22	; 0x06
        if(mm_min > MAX_FEEDRATE) { mm_min = MAX_FEEDRATE; }
        else if(mm_min < MIN_FEEDRATE) { mm_min = MIN_FEEDRATE; }
        // Get the "Steps-per-Millisecond" from the "Millimeters-per-Minute" parameter
        const float X_step_milli = (mm_min * X_STEPS_MM) / 60000.0f;
        const float Y_step_milli = (mm_min * Y_STEPS_MM) / 60000.0f;
        const float Z_step_milli = (mm_min * Z_STEPS_MM) / 60000.0f;
     794:	20 e0       	ldi	r18, 0x00	; 0
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	48 e4       	ldi	r20, 0x48	; 72
     79a:	53 e4       	ldi	r21, 0x43	; 67
     79c:	c7 01       	movw	r24, r14
     79e:	b6 01       	movw	r22, r12
     7a0:	71 d3       	rcall	.+1762   	; 0xe84 <__mulsf3>
     7a2:	20 e0       	ldi	r18, 0x00	; 0
     7a4:	30 e6       	ldi	r19, 0x60	; 96
     7a6:	4a e6       	ldi	r20, 0x6A	; 106
     7a8:	57 e4       	ldi	r21, 0x47	; 71
     7aa:	f4 d1       	rcall	.+1000   	; 0xb94 <__divsf3>
     7ac:	9b 01       	movw	r18, r22
     7ae:	ac 01       	movw	r20, r24
        // (1 / X_step_milli): gets the delay in milliseconds for one step
        // * 5: to get the count how often _delay_us(100); will be executed.
        // * 5: (and not * 10) because there are two delay loops for each step.
        speed.x_delay = (uint16)round((1 / X_step_milli) * 5);
        speed.y_delay = (uint16)round((1 / Y_step_milli) * 5);
        speed.z_delay = (uint16)round((1 / Z_step_milli) * 5);
     7b0:	60 e0       	ldi	r22, 0x00	; 0
     7b2:	70 e0       	ldi	r23, 0x00	; 0
     7b4:	80 e8       	ldi	r24, 0x80	; 128
     7b6:	9f e3       	ldi	r25, 0x3F	; 63
     7b8:	ed d1       	rcall	.+986    	; 0xb94 <__divsf3>
     7ba:	20 e0       	ldi	r18, 0x00	; 0
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	40 ea       	ldi	r20, 0xA0	; 160
     7c0:	50 e4       	ldi	r21, 0x40	; 64
     7c2:	60 d3       	rcall	.+1728   	; 0xe84 <__mulsf3>
     7c4:	c2 d3       	rcall	.+1924   	; 0xf4a <round>
     7c6:	53 d2       	rcall	.+1190   	; 0xc6e <__fixunssfsi>
     7c8:	79 87       	std	Y+9, r23	; 0x09
     7ca:	68 87       	std	Y+8, r22	; 0x08
        speed.feed_rate = mm_min;
     7cc:	c7 01       	movw	r24, r14
     7ce:	b6 01       	movw	r22, r12
     7d0:	4e d2       	rcall	.+1180   	; 0xc6e <__fixunssfsi>
     7d2:	68 83       	st	Y, r22
     7d4:	79 83       	std	Y+1, r23	; 0x01
     7d6:	8a 83       	std	Y+2, r24	; 0x02
     7d8:	9b 83       	std	Y+3, r25	; 0x03
    }
}
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	ff 90       	pop	r15
     7e0:	ef 90       	pop	r14
     7e2:	df 90       	pop	r13
     7e4:	cf 90       	pop	r12
     7e6:	08 95       	ret

000007e8 <goto_MACHINE_ZERO>:
// ---------------- FIX POSITIONING FUNCTIONS ------------------
// -------------------------------------------------------------

// Move to the endstops, then back to the soft limits
// and finally set all the positions to 0
void goto_MACHINE_ZERO() {
     7e8:	0f 93       	push	r16
     7ea:	1f 93       	push	r17
     7ec:	cf 93       	push	r28
     7ee:	df 93       	push	r29
	uint8 xend = 0, yend = 0, zend = 0;
	// Set the steppers to slowest possible speed
	set_feedrate(MIN_FEEDRATE);
     7f0:	60 e0       	ldi	r22, 0x00	; 0
     7f2:	70 e0       	ldi	r23, 0x00	; 0
     7f4:	88 e4       	ldi	r24, 0x48	; 72
     7f6:	93 e4       	ldi	r25, 0x43	; 67
     7f8:	73 df       	rcall	.-282    	; 0x6e0 <set_feedrate>
	enable_steppers();
     7fa:	bd dc       	rcall	.-1670   	; 0x176 <enable_steppers>
	// Move all Axis till the endstop is reaced
	set_X_direction(true);
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	d1 dc       	rcall	.-1630   	; 0x1a2 <set_X_direction>
	set_Y_direction(true);
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	f4 dc       	rcall	.-1560   	; 0x1ec <set_Y_direction>
	set_Z_direction(false);
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	17 dd       	rcall	.-1490   	; 0x236 <set_Z_direction>
	
	while(!x_endstop()) { step_X(speed.x_delay); }
     808:	c0 e1       	ldi	r28, 0x10	; 16
     80a:	d1 e0       	ldi	r29, 0x01	; 1
     80c:	03 c0       	rjmp	.+6      	; 0x814 <goto_MACHINE_ZERO+0x2c>
     80e:	8c 81       	ldd	r24, Y+4	; 0x04
     810:	9d 81       	ldd	r25, Y+5	; 0x05
     812:	cd dc       	rcall	.-1638   	; 0x1ae <step_X>
     814:	39 dd       	rcall	.-1422   	; 0x288 <x_endstop>
     816:	88 23       	and	r24, r24
     818:	d1 f3       	breq	.-12     	; 0x80e <goto_MACHINE_ZERO+0x26>
	while(!y_endstop()) { step_Y(speed.y_delay); }
     81a:	c0 e1       	ldi	r28, 0x10	; 16
     81c:	d1 e0       	ldi	r29, 0x01	; 1
     81e:	03 c0       	rjmp	.+6      	; 0x826 <goto_MACHINE_ZERO+0x3e>
     820:	8e 81       	ldd	r24, Y+6	; 0x06
     822:	9f 81       	ldd	r25, Y+7	; 0x07
     824:	e9 dc       	rcall	.-1582   	; 0x1f8 <step_Y>
     826:	37 dd       	rcall	.-1426   	; 0x296 <y_endstop>
     828:	88 23       	and	r24, r24
     82a:	d1 f3       	breq	.-12     	; 0x820 <goto_MACHINE_ZERO+0x38>
	while(!z_endstop()) { step_Z(speed.z_delay); }
     82c:	c0 e1       	ldi	r28, 0x10	; 16
     82e:	d1 e0       	ldi	r29, 0x01	; 1
     830:	03 c0       	rjmp	.+6      	; 0x838 <goto_MACHINE_ZERO+0x50>
     832:	88 85       	ldd	r24, Y+8	; 0x08
     834:	99 85       	ldd	r25, Y+9	; 0x09
     836:	05 dd       	rcall	.-1526   	; 0x242 <step_Z>
     838:	35 dd       	rcall	.-1430   	; 0x2a4 <z_endstop>
     83a:	88 23       	and	r24, r24
     83c:	d1 f3       	breq	.-12     	; 0x832 <goto_MACHINE_ZERO+0x4a>
		//if(!y_endstop()) { step_Y(speed.y_delay); } else { yend = 1; }
		//if(!z_endstop()) { step_Z(speed.z_delay); } else { zend = 1; }
		//if(xend && yend && zend) { break; }
	//}
	// Move out of the enstops to the soft limits
	set_X_direction(false);
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	b0 dc       	rcall	.-1696   	; 0x1a2 <set_X_direction>
	set_Y_direction(false);
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	d3 dc       	rcall	.-1626   	; 0x1ec <set_Y_direction>
	set_Z_direction(true);
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	f6 dc       	rcall	.-1556   	; 0x236 <set_Z_direction>
     84a:	c0 ed       	ldi	r28, 0xD0	; 208
     84c:	d7 e0       	ldi	r29, 0x07	; 7
	
	for(uint16 i = 0; i < XY_SAVE_DIST; i++) { 
		step_X(speed.x_delay); 
     84e:	00 e1       	ldi	r16, 0x10	; 16
     850:	11 e0       	ldi	r17, 0x01	; 1
     852:	f8 01       	movw	r30, r16
     854:	84 81       	ldd	r24, Z+4	; 0x04
     856:	95 81       	ldd	r25, Z+5	; 0x05
     858:	aa dc       	rcall	.-1708   	; 0x1ae <step_X>
		step_Y(speed.y_delay);
     85a:	f8 01       	movw	r30, r16
     85c:	86 81       	ldd	r24, Z+6	; 0x06
     85e:	97 81       	ldd	r25, Z+7	; 0x07
     860:	cb dc       	rcall	.-1642   	; 0x1f8 <step_Y>
     862:	21 97       	sbiw	r28, 0x01	; 1
	// Move out of the enstops to the soft limits
	set_X_direction(false);
	set_Y_direction(false);
	set_Z_direction(true);
	
	for(uint16 i = 0; i < XY_SAVE_DIST; i++) { 
     864:	b1 f7       	brne	.-20     	; 0x852 <goto_MACHINE_ZERO+0x6a>
     866:	c0 ed       	ldi	r28, 0xD0	; 208
     868:	d7 e0       	ldi	r29, 0x07	; 7
		step_X(speed.x_delay); 
		step_Y(speed.y_delay);
	}
	for(uint16 i = 0; i < Z_SAVE_DIST; i++) { step_Z(speed.z_delay); }
     86a:	00 e1       	ldi	r16, 0x10	; 16
     86c:	11 e0       	ldi	r17, 0x01	; 1
     86e:	f8 01       	movw	r30, r16
     870:	80 85       	ldd	r24, Z+8	; 0x08
     872:	91 85       	ldd	r25, Z+9	; 0x09
     874:	e6 dc       	rcall	.-1588   	; 0x242 <step_Z>
     876:	21 97       	sbiw	r28, 0x01	; 1
     878:	d1 f7       	brne	.-12     	; 0x86e <goto_MACHINE_ZERO+0x86>
	disable_steppers();	
     87a:	80 dc       	rcall	.-1792   	; 0x17c <disable_steppers>
	// Set the positions to 0 at the soft limits
    pos.x = 0;
     87c:	e0 e0       	ldi	r30, 0x00	; 0
     87e:	f1 e0       	ldi	r31, 0x01	; 1
     880:	10 82       	st	Z, r1
     882:	11 82       	std	Z+1, r1	; 0x01
     884:	12 82       	std	Z+2, r1	; 0x02
     886:	13 82       	std	Z+3, r1	; 0x03
   	pos.y = 0;
     888:	14 82       	std	Z+4, r1	; 0x04
     88a:	15 82       	std	Z+5, r1	; 0x05
     88c:	16 82       	std	Z+6, r1	; 0x06
     88e:	17 82       	std	Z+7, r1	; 0x07
   	pos.z = 0;
     890:	10 86       	std	Z+8, r1	; 0x08
     892:	11 86       	std	Z+9, r1	; 0x09
     894:	12 86       	std	Z+10, r1	; 0x0a
     896:	13 86       	std	Z+11, r1	; 0x0b
   	// Move Z to the idle pos (X and Y are already there)
	goto_Z_IDLE();
     898:	f5 de       	rcall	.-534    	; 0x684 <goto_Z_IDLE>
}
     89a:	df 91       	pop	r29
     89c:	cf 91       	pop	r28
     89e:	1f 91       	pop	r17
     8a0:	0f 91       	pop	r16
     8a2:	08 95       	ret

000008a4 <motion_init>:
// -------------------------------------------------------------
// ------------------- MOTION INIT FUNCTION --------------------
// -------------------------------------------------------------

void motion_init() {
	memset(&pos, 0, sizeof(pos));
     8a4:	8c e0       	ldi	r24, 0x0C	; 12
     8a6:	e0 e0       	ldi	r30, 0x00	; 0
     8a8:	f1 e0       	ldi	r31, 0x01	; 1
     8aa:	df 01       	movw	r26, r30
     8ac:	1d 92       	st	X+, r1
     8ae:	8a 95       	dec	r24
     8b0:	e9 f7       	brne	.-6      	; 0x8ac <motion_init+0x8>
	memset(&speed, 0, sizeof(speed));
     8b2:	8a e0       	ldi	r24, 0x0A	; 10
     8b4:	e0 e1       	ldi	r30, 0x10	; 16
     8b6:	f1 e0       	ldi	r31, 0x01	; 1
     8b8:	df 01       	movw	r26, r30
     8ba:	1d 92       	st	X+, r1
     8bc:	8a 95       	dec	r24
     8be:	e9 f7       	brne	.-6      	; 0x8ba <motion_init+0x16>
	// First initialize the Axis Endstops and the stepper motors
	endstop_init();
     8c0:	df dc       	rcall	.-1602   	; 0x280 <endstop_init>
	stepper_init();
     8c2:	5f dc       	rcall	.-1858   	; 0x182 <stepper_init>
	// Reset all Axis positions
	goto_MACHINE_ZERO();
     8c4:	91 cf       	rjmp	.-222    	; 0x7e8 <goto_MACHINE_ZERO>
     8c6:	08 95       	ret

000008c8 <get_number>:
// --------------------------- HELPER FUNCTIONS ---------------------------
// ------------------------------------------------------------------------

// Parameter: Data-String and Char which number to extract
// Return: Number after a char e.g.: Returns 17 when data = G17
float get_number(const byte* data, char letter) {
     8c8:	8f 92       	push	r8
     8ca:	9f 92       	push	r9
     8cc:	af 92       	push	r10
     8ce:	bf 92       	push	r11
     8d0:	cf 92       	push	r12
     8d2:	df 92       	push	r13
     8d4:	ef 92       	push	r14
     8d6:	ff 92       	push	r15
     8d8:	0f 93       	push	r16
     8da:	1f 93       	push	r17
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
     8e0:	cd b7       	in	r28, 0x3d	; 61
     8e2:	de b7       	in	r29, 0x3e	; 62
     8e4:	8c 01       	movw	r16, r24
		// Parse the number chars into an int16 value and return it;
		return (float)atof(tmpstr);	
	} else {
		return FLT_MAX;	
	}
}
     8e6:	ad b6       	in	r10, 0x3d	; 61
     8e8:	be b6       	in	r11, 0x3e	; 62

// Parameter: Data-String and Char which number to extract
// Return: Number after a char e.g.: Returns 17 when data = G17
float get_number(const byte* data, char letter) {
	// Get position of the X and the next ' ' space chars
	uint8* pc = (strchr(data, letter) - (char*)data);
     8ea:	70 e0       	ldi	r23, 0x00	; 0
     8ec:	51 d3       	rcall	.+1698   	; 0xf90 <strchr>
     8ee:	80 1b       	sub	r24, r16
     8f0:	91 0b       	sbc	r25, r17
	if(pc != NULL) {
     8f2:	c1 f1       	breq	.+112    	; 0x964 <get_number+0x9c>
     8f4:	8d b6       	in	r8, 0x3d	; 61
     8f6:	9e b6       	in	r9, 0x3e	; 62
		const uint8 pos_char = *pc;
     8f8:	fc 01       	movw	r30, r24
     8fa:	d0 80       	ld	r13, Z
		uint8 pos_space = (strchr(data + pos_char, ' ') - (char*)data);
     8fc:	ed 2c       	mov	r14, r13
     8fe:	f1 2c       	mov	r15, r1
     900:	60 e2       	ldi	r22, 0x20	; 32
     902:	70 e0       	ldi	r23, 0x00	; 0
     904:	c8 01       	movw	r24, r16
     906:	8e 0d       	add	r24, r14
     908:	9f 1d       	adc	r25, r15
     90a:	42 d3       	rcall	.+1668   	; 0xf90 <strchr>
     90c:	80 1b       	sub	r24, r16
     90e:	91 0b       	sbc	r25, r17
		// If pos_space is strange, the end of the string was reached / set it == length
		if(pos_space < 0 || pos_space >= BUF_SIZE) { pos_space = (uint8)strlen(data); }
     910:	88 23       	and	r24, r24
     912:	3c f4       	brge	.+14     	; 0x922 <get_number+0x5a>
     914:	f8 01       	movw	r30, r16
     916:	01 90       	ld	r0, Z+
     918:	00 20       	and	r0, r0
     91a:	e9 f7       	brne	.-6      	; 0x916 <get_number+0x4e>
     91c:	31 97       	sbiw	r30, 0x01	; 1
     91e:	8e 2f       	mov	r24, r30
     920:	80 1b       	sub	r24, r16
     922:	4d 2d       	mov	r20, r13
     924:	40 95       	com	r20
		// Get all the chars between the letter and the space (e.g. "X015 ")
		// and put them into an new string
		const uint8 size = (pos_space - pos_char) - 1;
     926:	84 0f       	add	r24, r20
		char tmpstr[size];
     928:	48 2f       	mov	r20, r24
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	8d b7       	in	r24, 0x3d	; 61
     92e:	9e b7       	in	r25, 0x3e	; 62
     930:	84 1b       	sub	r24, r20
     932:	95 0b       	sbc	r25, r21
     934:	0f b6       	in	r0, 0x3f	; 63
     936:	f8 94       	cli
     938:	9e bf       	out	0x3e, r25	; 62
     93a:	0f be       	out	0x3f, r0	; 63
     93c:	8d bf       	out	0x3d, r24	; 61
     93e:	ed b7       	in	r30, 0x3d	; 61
     940:	fe b7       	in	r31, 0x3e	; 62
     942:	31 96       	adiw	r30, 0x01	; 1
     944:	6f 01       	movw	r12, r30
		strncpy(tmpstr, (data + pos_char + 1), size);
     946:	b7 01       	movw	r22, r14
     948:	6f 5f       	subi	r22, 0xFF	; 255
     94a:	7f 4f       	sbci	r23, 0xFF	; 255
     94c:	60 0f       	add	r22, r16
     94e:	71 1f       	adc	r23, r17
     950:	cf 01       	movw	r24, r30
     952:	29 d3       	rcall	.+1618   	; 0xfa6 <strncpy>
		// Parse the number chars into an int16 value and return it;
		return (float)atof(tmpstr);	
     954:	c6 01       	movw	r24, r12
     956:	19 d3       	rcall	.+1586   	; 0xf8a <atof>
     958:	0f b6       	in	r0, 0x3f	; 63
     95a:	f8 94       	cli
     95c:	9e be       	out	0x3e, r9	; 62
     95e:	0f be       	out	0x3f, r0	; 63
     960:	8d be       	out	0x3d, r8	; 61
     962:	04 c0       	rjmp	.+8      	; 0x96c <get_number+0xa4>
	} else {
		return FLT_MAX;	
     964:	6f ef       	ldi	r22, 0xFF	; 255
     966:	7f ef       	ldi	r23, 0xFF	; 255
     968:	8f e7       	ldi	r24, 0x7F	; 127
     96a:	9f e7       	ldi	r25, 0x7F	; 127
	}
}
     96c:	0f b6       	in	r0, 0x3f	; 63
     96e:	f8 94       	cli
     970:	be be       	out	0x3e, r11	; 62
     972:	0f be       	out	0x3f, r0	; 63
     974:	ad be       	out	0x3d, r10	; 61
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	1f 91       	pop	r17
     97c:	0f 91       	pop	r16
     97e:	ff 90       	pop	r15
     980:	ef 90       	pop	r14
     982:	df 90       	pop	r13
     984:	cf 90       	pop	r12
     986:	bf 90       	pop	r11
     988:	af 90       	pop	r10
     98a:	9f 90       	pop	r9
     98c:	8f 90       	pop	r8
     98e:	08 95       	ret

00000990 <parse_and_execute_G0>:
// ------------------------------------------------------------------------

// G00: Rapid positioning
// Move all Axis at fast speed until vector {X,Y,Z} is reached
// Parameter: Data-String without the Letter and Number (e.g.: No "G00 ")
void parse_and_execute_G0(byte* data) {
     990:	cf 93       	push	r28
     992:	df 93       	push	r29
     994:	ec 01       	movw	r28, r24
	const float moveX = get_number(data, 'X');
     996:	68 e5       	ldi	r22, 0x58	; 88
     998:	97 df       	rcall	.-210    	; 0x8c8 <get_number>
	const float moveY = get_number(data, 'Y');
     99a:	69 e5       	ldi	r22, 0x59	; 89
     99c:	ce 01       	movw	r24, r28
     99e:	94 df       	rcall	.-216    	; 0x8c8 <get_number>
	const float moveZ = get_number(data, 'Z');
     9a0:	6a e5       	ldi	r22, 0x5A	; 90
     9a2:	ce 01       	movw	r24, r28
     9a4:	91 df       	rcall	.-222    	; 0x8c8 <get_number>
	// Set the feed rate to max !!!!!!
	// Move all the Axis
	// linear_motion(...);
}
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	08 95       	ret

000009ac <parse_and_execute_G1>:

// G01: Linear interpolation
// Move in a straight line with normal Axis speed until vector {X,Y,Z} is reached
// Parameter: Data-String without the Letter and Number (e.g.: No "G00 ")
void parse_and_execute_G1(byte* data) {
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	ec 01       	movw	r28, r24
	const float moveX = get_number(data, 'X');
     9b2:	68 e5       	ldi	r22, 0x58	; 88
     9b4:	89 df       	rcall	.-238    	; 0x8c8 <get_number>
	const float moveY = get_number(data, 'Y');
     9b6:	69 e5       	ldi	r22, 0x59	; 89
     9b8:	ce 01       	movw	r24, r28
     9ba:	86 df       	rcall	.-244    	; 0x8c8 <get_number>
	const float moveZ = get_number(data, 'Z');
     9bc:	6a e5       	ldi	r22, 0x5A	; 90
     9be:	ce 01       	movw	r24, r28
     9c0:	83 df       	rcall	.-250    	; 0x8c8 <get_number>
	const float feed = get_number(data, 'F');
     9c2:	66 e4       	ldi	r22, 0x46	; 70
     9c4:	ce 01       	movw	r24, r28
     9c6:	80 df       	rcall	.-256    	; 0x8c8 <get_number>
	// Set the feed rate to f !!!!!!
	// Move all the Axis
	// linear_motion(...);
}
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	08 95       	ret

000009ce <parse_and_execute_G2G3>:

// G02 - G03: Arc motion
// Move in an clockwise (G02) or counter-clockwise (G03) arc until vector {X,Y} is reached
// Move only two Axis (X and Y) parallel. Z Axis arcs are not supported right now
void parse_and_execute_G2G3(byte* data, byte is_g2) {
     9ce:	cf 93       	push	r28
     9d0:	df 93       	push	r29
     9d2:	ec 01       	movw	r28, r24
	const float endX = get_number(data, 'X');
     9d4:	68 e5       	ldi	r22, 0x58	; 88
     9d6:	78 df       	rcall	.-272    	; 0x8c8 <get_number>
	const float endY = get_number(data, 'Y');
     9d8:	69 e5       	ldi	r22, 0x59	; 89
     9da:	ce 01       	movw	r24, r28
     9dc:	75 df       	rcall	.-278    	; 0x8c8 <get_number>
	const float centerX = get_number(data, 'I');
     9de:	69 e4       	ldi	r22, 0x49	; 73
     9e0:	ce 01       	movw	r24, r28
     9e2:	72 df       	rcall	.-284    	; 0x8c8 <get_number>
	const float centerY = get_number(data, 'J');
     9e4:	6a e4       	ldi	r22, 0x4A	; 74
     9e6:	ce 01       	movw	r24, r28
     9e8:	6f df       	rcall	.-290    	; 0x8c8 <get_number>
	const float feed = get_number(data, 'F');
     9ea:	66 e4       	ldi	r22, 0x46	; 70
     9ec:	ce 01       	movw	r24, r28
     9ee:	6c df       	rcall	.-296    	; 0x8c8 <get_number>
	// set the feedrate
	// set_feedrate();
	
}
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	08 95       	ret

000009f6 <parse_and_execute_G4>:

// G04: Dwell
// Machine waits for a number of milliseconds
void parse_and_execute_G4(byte* data) {
     9f6:	cf 92       	push	r12
     9f8:	df 92       	push	r13
     9fa:	ef 92       	push	r14
     9fc:	ff 92       	push	r15
	const float dwell_milli = get_number(data, 'P');
     9fe:	60 e5       	ldi	r22, 0x50	; 80
     a00:	63 df       	rcall	.-314    	; 0x8c8 <get_number>
     a02:	6b 01       	movw	r12, r22
     a04:	7c 01       	movw	r14, r24
	if(dwell_milli != FLT_MAX) {
     a06:	2f ef       	ldi	r18, 0xFF	; 255
     a08:	3f ef       	ldi	r19, 0xFF	; 255
     a0a:	4f e7       	ldi	r20, 0x7F	; 127
     a0c:	5f e7       	ldi	r21, 0x7F	; 127
     a0e:	be d0       	rcall	.+380    	; 0xb8c <__cmpsf2>
     a10:	88 23       	and	r24, r24
     a12:	29 f0       	breq	.+10     	; 0xa1e <parse_and_execute_G4+0x28>
		dwell_milliseconds(dwell_milli);
     a14:	c7 01       	movw	r24, r14
     a16:	b6 01       	movw	r22, r12
     a18:	2a d1       	rcall	.+596    	; 0xc6e <__fixunssfsi>
     a1a:	cb 01       	movw	r24, r22
     a1c:	51 de       	rcall	.-862    	; 0x6c0 <dwell_milliseconds>
	}
}
     a1e:	ff 90       	pop	r15
     a20:	ef 90       	pop	r14
     a22:	df 90       	pop	r13
     a24:	cf 90       	pop	r12
     a26:	08 95       	ret

00000a28 <parse_string>:
#include "stdlib.h"
#include "motion.h"

float get_number(const byte* data, char letter);

void parse_string(byte* data) {
     a28:	cf 93       	push	r28
     a2a:	df 93       	push	r29
	if(!sizeof(data)) { return; }
	const byte letter = data[0];
     a2c:	fc 01       	movw	r30, r24
     a2e:	20 81       	ld	r18, Z
	if(letter < 'A'|| letter > 'Z') { return; }
     a30:	3f eb       	ldi	r19, 0xBF	; 191
     a32:	32 0f       	add	r19, r18
     a34:	3a 31       	cpi	r19, 0x1A	; 26
     a36:	50 f5       	brcc	.+84     	; 0xa8c <parse_string+0x64>
     a38:	ec 01       	movw	r28, r24
	// Check G Codes and M Codes
	if(letter == 'G') {
     a3a:	27 34       	cpi	r18, 0x47	; 71
     a3c:	19 f5       	brne	.+70     	; 0xa84 <parse_string+0x5c>
		const uint8 number = get_number(data, 'G');
     a3e:	67 e4       	ldi	r22, 0x47	; 71
     a40:	43 df       	rcall	.-378    	; 0x8c8 <get_number>
     a42:	15 d1       	rcall	.+554    	; 0xc6e <__fixunssfsi>
		if(number < 0) { return; }
		switch(number) {
     a44:	62 30       	cpi	r22, 0x02	; 2
     a46:	89 f0       	breq	.+34     	; 0xa6a <parse_string+0x42>
     a48:	28 f4       	brcc	.+10     	; 0xa54 <parse_string+0x2c>
     a4a:	66 23       	and	r22, r22
     a4c:	41 f0       	breq	.+16     	; 0xa5e <parse_string+0x36>
     a4e:	61 30       	cpi	r22, 0x01	; 1
     a50:	49 f0       	breq	.+18     	; 0xa64 <parse_string+0x3c>
     a52:	1c c0       	rjmp	.+56     	; 0xa8c <parse_string+0x64>
     a54:	63 30       	cpi	r22, 0x03	; 3
     a56:	71 f0       	breq	.+28     	; 0xa74 <parse_string+0x4c>
     a58:	64 30       	cpi	r22, 0x04	; 4
     a5a:	89 f0       	breq	.+34     	; 0xa7e <parse_string+0x56>
     a5c:	17 c0       	rjmp	.+46     	; 0xa8c <parse_string+0x64>
			case 0:		parse_and_execute_G0(data);				break;
     a5e:	ce 01       	movw	r24, r28
     a60:	97 df       	rcall	.-210    	; 0x990 <parse_and_execute_G0>
     a62:	14 c0       	rjmp	.+40     	; 0xa8c <parse_string+0x64>
			case 1:		parse_and_execute_G1(data);				break;
     a64:	ce 01       	movw	r24, r28
     a66:	a2 df       	rcall	.-188    	; 0x9ac <parse_and_execute_G1>
     a68:	11 c0       	rjmp	.+34     	; 0xa8c <parse_string+0x64>
			case 2:		parse_and_execute_G2G3(data, true);		break;
     a6a:	61 e0       	ldi	r22, 0x01	; 1
     a6c:	70 e0       	ldi	r23, 0x00	; 0
     a6e:	ce 01       	movw	r24, r28
     a70:	ae df       	rcall	.-164    	; 0x9ce <parse_and_execute_G2G3>
     a72:	0c c0       	rjmp	.+24     	; 0xa8c <parse_string+0x64>
			case 3:		parse_and_execute_G2G3(data, false);	break;
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	ce 01       	movw	r24, r28
     a7a:	a9 df       	rcall	.-174    	; 0x9ce <parse_and_execute_G2G3>
     a7c:	07 c0       	rjmp	.+14     	; 0xa8c <parse_string+0x64>
			case 4:		parse_and_execute_G4(data);				break;
     a7e:	ce 01       	movw	r24, r28
     a80:	ba df       	rcall	.-140    	; 0x9f6 <parse_and_execute_G4>
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <parse_string+0x64>
			case 80:						break;
			case 93:						break;
			case 94:						break;
			default: break;
		}
	} else if(letter == 'M') {
     a84:	2d 34       	cpi	r18, 0x4D	; 77
     a86:	11 f4       	brne	.+4      	; 0xa8c <parse_string+0x64>
		const uint8 number = get_number(data, 'M');
     a88:	6d e4       	ldi	r22, 0x4D	; 77
     a8a:	1e df       	rcall	.-452    	; 0x8c8 <get_number>
			case 1:							break;
			default: break;
		}
	}
	
}
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	08 95       	ret

00000a92 <basicCNC_Firmware_init>:
#include "string_parser.h"

// Call the whole tree of init functions
void basicCNC_Firmware_init() {
	// Initializes the serial communication
	serial_init();
     a92:	2c db       	rcall	.-2472   	; 0xec <serial_init>
	// Initializes the motion funcitons / structs
	// Calls the Endstop init function
	// Calls the Stepper-Motor init function
	motion_init();
     a94:	07 cf       	rjmp	.-498    	; 0x8a4 <motion_init>
     a96:	08 95       	ret

00000a98 <basicCNC_Firmware_loop>:
}


// Firmware main loop
void basicCNC_Firmware_loop() {
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
     a9c:	cd b7       	in	r28, 0x3d	; 61
     a9e:	de b7       	in	r29, 0x3e	; 62
     aa0:	c0 58       	subi	r28, 0x80	; 128
     aa2:	d1 09       	sbc	r29, r1
     aa4:	0f b6       	in	r0, 0x3f	; 63
     aa6:	f8 94       	cli
     aa8:	de bf       	out	0x3e, r29	; 62
     aaa:	0f be       	out	0x3f, r0	; 63
     aac:	cd bf       	out	0x3d, r28	; 61
  	//	 INPUT GENERATED G-CODE LINES"
  	//
  	// } else if("AUTOMATIC PROCESSING") {
  		// while("NOT M2 / PROGRAM END") {
  			byte data[BUF_SIZE];
			serial_receive_string(data, sizeof(data));	
     aae:	60 e8       	ldi	r22, 0x80	; 128
     ab0:	ce 01       	movw	r24, r28
     ab2:	01 96       	adiw	r24, 0x01	; 1
     ab4:	2f db       	rcall	.-2466   	; 0x114 <serial_receive_string>
			// HANDLE SERIAL ERRORS
			parse_string(data);
     ab6:	ce 01       	movw	r24, r28
     ab8:	01 96       	adiw	r24, 0x01	; 1
     aba:	b6 df       	rcall	.-148    	; 0xa28 <parse_string>
  	// 	"ERROR HANDLING" 
  	//	"SYSTEM RESET"
  	// 
  	// }
  	
  }
     abc:	f8 cf       	rjmp	.-16     	; 0xaae <basicCNC_Firmware_loop+0x16>

00000abe <main>:

#include "smove-AF.h"

int main(void) {
	// Initialize the Firmware
	basicCNC_Firmware_init();
     abe:	e9 df       	rcall	.-46     	; 0xa92 <basicCNC_Firmware_init>
	// Start the main loop
	basicCNC_Firmware_loop();
     ac0:	eb df       	rcall	.-42     	; 0xa98 <basicCNC_Firmware_loop>

00000ac2 <__subsf3>:
     ac2:	50 58       	subi	r21, 0x80	; 128

00000ac4 <__addsf3>:
     ac4:	bb 27       	eor	r27, r27
     ac6:	aa 27       	eor	r26, r26
     ac8:	0e d0       	rcall	.+28     	; 0xae6 <__addsf3x>
     aca:	9e c1       	rjmp	.+828    	; 0xe08 <__fp_round>
     acc:	8f d1       	rcall	.+798    	; 0xdec <__fp_pscA>
     ace:	30 f0       	brcs	.+12     	; 0xadc <__addsf3+0x18>
     ad0:	94 d1       	rcall	.+808    	; 0xdfa <__fp_pscB>
     ad2:	20 f0       	brcs	.+8      	; 0xadc <__addsf3+0x18>
     ad4:	31 f4       	brne	.+12     	; 0xae2 <__addsf3+0x1e>
     ad6:	9f 3f       	cpi	r25, 0xFF	; 255
     ad8:	11 f4       	brne	.+4      	; 0xade <__addsf3+0x1a>
     ada:	1e f4       	brtc	.+6      	; 0xae2 <__addsf3+0x1e>
     adc:	84 c1       	rjmp	.+776    	; 0xde6 <__fp_nan>
     ade:	0e f4       	brtc	.+2      	; 0xae2 <__addsf3+0x1e>
     ae0:	e0 95       	com	r30
     ae2:	e7 fb       	bst	r30, 7
     ae4:	51 c1       	rjmp	.+674    	; 0xd88 <__fp_inf>

00000ae6 <__addsf3x>:
     ae6:	e9 2f       	mov	r30, r25
     ae8:	a0 d1       	rcall	.+832    	; 0xe2a <__fp_split3>
     aea:	80 f3       	brcs	.-32     	; 0xacc <__addsf3+0x8>
     aec:	ba 17       	cp	r27, r26
     aee:	62 07       	cpc	r22, r18
     af0:	73 07       	cpc	r23, r19
     af2:	84 07       	cpc	r24, r20
     af4:	95 07       	cpc	r25, r21
     af6:	18 f0       	brcs	.+6      	; 0xafe <__addsf3x+0x18>
     af8:	71 f4       	brne	.+28     	; 0xb16 <__addsf3x+0x30>
     afa:	9e f5       	brtc	.+102    	; 0xb62 <__addsf3x+0x7c>
     afc:	b8 c1       	rjmp	.+880    	; 0xe6e <__fp_zero>
     afe:	0e f4       	brtc	.+2      	; 0xb02 <__addsf3x+0x1c>
     b00:	e0 95       	com	r30
     b02:	0b 2e       	mov	r0, r27
     b04:	ba 2f       	mov	r27, r26
     b06:	a0 2d       	mov	r26, r0
     b08:	0b 01       	movw	r0, r22
     b0a:	b9 01       	movw	r22, r18
     b0c:	90 01       	movw	r18, r0
     b0e:	0c 01       	movw	r0, r24
     b10:	ca 01       	movw	r24, r20
     b12:	a0 01       	movw	r20, r0
     b14:	11 24       	eor	r1, r1
     b16:	ff 27       	eor	r31, r31
     b18:	59 1b       	sub	r21, r25
     b1a:	99 f0       	breq	.+38     	; 0xb42 <__addsf3x+0x5c>
     b1c:	59 3f       	cpi	r21, 0xF9	; 249
     b1e:	50 f4       	brcc	.+20     	; 0xb34 <__addsf3x+0x4e>
     b20:	50 3e       	cpi	r21, 0xE0	; 224
     b22:	68 f1       	brcs	.+90     	; 0xb7e <__addsf3x+0x98>
     b24:	1a 16       	cp	r1, r26
     b26:	f0 40       	sbci	r31, 0x00	; 0
     b28:	a2 2f       	mov	r26, r18
     b2a:	23 2f       	mov	r18, r19
     b2c:	34 2f       	mov	r19, r20
     b2e:	44 27       	eor	r20, r20
     b30:	58 5f       	subi	r21, 0xF8	; 248
     b32:	f3 cf       	rjmp	.-26     	; 0xb1a <__addsf3x+0x34>
     b34:	46 95       	lsr	r20
     b36:	37 95       	ror	r19
     b38:	27 95       	ror	r18
     b3a:	a7 95       	ror	r26
     b3c:	f0 40       	sbci	r31, 0x00	; 0
     b3e:	53 95       	inc	r21
     b40:	c9 f7       	brne	.-14     	; 0xb34 <__addsf3x+0x4e>
     b42:	7e f4       	brtc	.+30     	; 0xb62 <__addsf3x+0x7c>
     b44:	1f 16       	cp	r1, r31
     b46:	ba 0b       	sbc	r27, r26
     b48:	62 0b       	sbc	r22, r18
     b4a:	73 0b       	sbc	r23, r19
     b4c:	84 0b       	sbc	r24, r20
     b4e:	ba f0       	brmi	.+46     	; 0xb7e <__addsf3x+0x98>
     b50:	91 50       	subi	r25, 0x01	; 1
     b52:	a1 f0       	breq	.+40     	; 0xb7c <__addsf3x+0x96>
     b54:	ff 0f       	add	r31, r31
     b56:	bb 1f       	adc	r27, r27
     b58:	66 1f       	adc	r22, r22
     b5a:	77 1f       	adc	r23, r23
     b5c:	88 1f       	adc	r24, r24
     b5e:	c2 f7       	brpl	.-16     	; 0xb50 <__addsf3x+0x6a>
     b60:	0e c0       	rjmp	.+28     	; 0xb7e <__addsf3x+0x98>
     b62:	ba 0f       	add	r27, r26
     b64:	62 1f       	adc	r22, r18
     b66:	73 1f       	adc	r23, r19
     b68:	84 1f       	adc	r24, r20
     b6a:	48 f4       	brcc	.+18     	; 0xb7e <__addsf3x+0x98>
     b6c:	87 95       	ror	r24
     b6e:	77 95       	ror	r23
     b70:	67 95       	ror	r22
     b72:	b7 95       	ror	r27
     b74:	f7 95       	ror	r31
     b76:	9e 3f       	cpi	r25, 0xFE	; 254
     b78:	08 f0       	brcs	.+2      	; 0xb7c <__addsf3x+0x96>
     b7a:	b3 cf       	rjmp	.-154    	; 0xae2 <__addsf3+0x1e>
     b7c:	93 95       	inc	r25
     b7e:	88 0f       	add	r24, r24
     b80:	08 f0       	brcs	.+2      	; 0xb84 <__addsf3x+0x9e>
     b82:	99 27       	eor	r25, r25
     b84:	ee 0f       	add	r30, r30
     b86:	97 95       	ror	r25
     b88:	87 95       	ror	r24
     b8a:	08 95       	ret

00000b8c <__cmpsf2>:
     b8c:	d9 d0       	rcall	.+434    	; 0xd40 <__fp_cmp>
     b8e:	08 f4       	brcc	.+2      	; 0xb92 <__cmpsf2+0x6>
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	08 95       	ret

00000b94 <__divsf3>:
     b94:	0c d0       	rcall	.+24     	; 0xbae <__divsf3x>
     b96:	38 c1       	rjmp	.+624    	; 0xe08 <__fp_round>
     b98:	30 d1       	rcall	.+608    	; 0xdfa <__fp_pscB>
     b9a:	40 f0       	brcs	.+16     	; 0xbac <__divsf3+0x18>
     b9c:	27 d1       	rcall	.+590    	; 0xdec <__fp_pscA>
     b9e:	30 f0       	brcs	.+12     	; 0xbac <__divsf3+0x18>
     ba0:	21 f4       	brne	.+8      	; 0xbaa <__divsf3+0x16>
     ba2:	5f 3f       	cpi	r21, 0xFF	; 255
     ba4:	19 f0       	breq	.+6      	; 0xbac <__divsf3+0x18>
     ba6:	f0 c0       	rjmp	.+480    	; 0xd88 <__fp_inf>
     ba8:	51 11       	cpse	r21, r1
     baa:	62 c1       	rjmp	.+708    	; 0xe70 <__fp_szero>
     bac:	1c c1       	rjmp	.+568    	; 0xde6 <__fp_nan>

00000bae <__divsf3x>:
     bae:	3d d1       	rcall	.+634    	; 0xe2a <__fp_split3>
     bb0:	98 f3       	brcs	.-26     	; 0xb98 <__divsf3+0x4>

00000bb2 <__divsf3_pse>:
     bb2:	99 23       	and	r25, r25
     bb4:	c9 f3       	breq	.-14     	; 0xba8 <__divsf3+0x14>
     bb6:	55 23       	and	r21, r21
     bb8:	b1 f3       	breq	.-20     	; 0xba6 <__divsf3+0x12>
     bba:	95 1b       	sub	r25, r21
     bbc:	55 0b       	sbc	r21, r21
     bbe:	bb 27       	eor	r27, r27
     bc0:	aa 27       	eor	r26, r26
     bc2:	62 17       	cp	r22, r18
     bc4:	73 07       	cpc	r23, r19
     bc6:	84 07       	cpc	r24, r20
     bc8:	38 f0       	brcs	.+14     	; 0xbd8 <__divsf3_pse+0x26>
     bca:	9f 5f       	subi	r25, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	22 0f       	add	r18, r18
     bd0:	33 1f       	adc	r19, r19
     bd2:	44 1f       	adc	r20, r20
     bd4:	aa 1f       	adc	r26, r26
     bd6:	a9 f3       	breq	.-22     	; 0xbc2 <__divsf3_pse+0x10>
     bd8:	33 d0       	rcall	.+102    	; 0xc40 <__divsf3_pse+0x8e>
     bda:	0e 2e       	mov	r0, r30
     bdc:	3a f0       	brmi	.+14     	; 0xbec <__divsf3_pse+0x3a>
     bde:	e0 e8       	ldi	r30, 0x80	; 128
     be0:	30 d0       	rcall	.+96     	; 0xc42 <__divsf3_pse+0x90>
     be2:	91 50       	subi	r25, 0x01	; 1
     be4:	50 40       	sbci	r21, 0x00	; 0
     be6:	e6 95       	lsr	r30
     be8:	00 1c       	adc	r0, r0
     bea:	ca f7       	brpl	.-14     	; 0xbde <__divsf3_pse+0x2c>
     bec:	29 d0       	rcall	.+82     	; 0xc40 <__divsf3_pse+0x8e>
     bee:	fe 2f       	mov	r31, r30
     bf0:	27 d0       	rcall	.+78     	; 0xc40 <__divsf3_pse+0x8e>
     bf2:	66 0f       	add	r22, r22
     bf4:	77 1f       	adc	r23, r23
     bf6:	88 1f       	adc	r24, r24
     bf8:	bb 1f       	adc	r27, r27
     bfa:	26 17       	cp	r18, r22
     bfc:	37 07       	cpc	r19, r23
     bfe:	48 07       	cpc	r20, r24
     c00:	ab 07       	cpc	r26, r27
     c02:	b0 e8       	ldi	r27, 0x80	; 128
     c04:	09 f0       	breq	.+2      	; 0xc08 <__divsf3_pse+0x56>
     c06:	bb 0b       	sbc	r27, r27
     c08:	80 2d       	mov	r24, r0
     c0a:	bf 01       	movw	r22, r30
     c0c:	ff 27       	eor	r31, r31
     c0e:	93 58       	subi	r25, 0x83	; 131
     c10:	5f 4f       	sbci	r21, 0xFF	; 255
     c12:	2a f0       	brmi	.+10     	; 0xc1e <__divsf3_pse+0x6c>
     c14:	9e 3f       	cpi	r25, 0xFE	; 254
     c16:	51 05       	cpc	r21, r1
     c18:	68 f0       	brcs	.+26     	; 0xc34 <__divsf3_pse+0x82>
     c1a:	b6 c0       	rjmp	.+364    	; 0xd88 <__fp_inf>
     c1c:	29 c1       	rjmp	.+594    	; 0xe70 <__fp_szero>
     c1e:	5f 3f       	cpi	r21, 0xFF	; 255
     c20:	ec f3       	brlt	.-6      	; 0xc1c <__divsf3_pse+0x6a>
     c22:	98 3e       	cpi	r25, 0xE8	; 232
     c24:	dc f3       	brlt	.-10     	; 0xc1c <__divsf3_pse+0x6a>
     c26:	86 95       	lsr	r24
     c28:	77 95       	ror	r23
     c2a:	67 95       	ror	r22
     c2c:	b7 95       	ror	r27
     c2e:	f7 95       	ror	r31
     c30:	9f 5f       	subi	r25, 0xFF	; 255
     c32:	c9 f7       	brne	.-14     	; 0xc26 <__divsf3_pse+0x74>
     c34:	88 0f       	add	r24, r24
     c36:	91 1d       	adc	r25, r1
     c38:	96 95       	lsr	r25
     c3a:	87 95       	ror	r24
     c3c:	97 f9       	bld	r25, 7
     c3e:	08 95       	ret
     c40:	e1 e0       	ldi	r30, 0x01	; 1
     c42:	66 0f       	add	r22, r22
     c44:	77 1f       	adc	r23, r23
     c46:	88 1f       	adc	r24, r24
     c48:	bb 1f       	adc	r27, r27
     c4a:	62 17       	cp	r22, r18
     c4c:	73 07       	cpc	r23, r19
     c4e:	84 07       	cpc	r24, r20
     c50:	ba 07       	cpc	r27, r26
     c52:	20 f0       	brcs	.+8      	; 0xc5c <__divsf3_pse+0xaa>
     c54:	62 1b       	sub	r22, r18
     c56:	73 0b       	sbc	r23, r19
     c58:	84 0b       	sbc	r24, r20
     c5a:	ba 0b       	sbc	r27, r26
     c5c:	ee 1f       	adc	r30, r30
     c5e:	88 f7       	brcc	.-30     	; 0xc42 <__divsf3_pse+0x90>
     c60:	e0 95       	com	r30
     c62:	08 95       	ret

00000c64 <__fixsfsi>:
     c64:	04 d0       	rcall	.+8      	; 0xc6e <__fixunssfsi>
     c66:	68 94       	set
     c68:	b1 11       	cpse	r27, r1
     c6a:	02 c1       	rjmp	.+516    	; 0xe70 <__fp_szero>
     c6c:	08 95       	ret

00000c6e <__fixunssfsi>:
     c6e:	e5 d0       	rcall	.+458    	; 0xe3a <__fp_splitA>
     c70:	88 f0       	brcs	.+34     	; 0xc94 <__fixunssfsi+0x26>
     c72:	9f 57       	subi	r25, 0x7F	; 127
     c74:	90 f0       	brcs	.+36     	; 0xc9a <__fixunssfsi+0x2c>
     c76:	b9 2f       	mov	r27, r25
     c78:	99 27       	eor	r25, r25
     c7a:	b7 51       	subi	r27, 0x17	; 23
     c7c:	a0 f0       	brcs	.+40     	; 0xca6 <__fixunssfsi+0x38>
     c7e:	d1 f0       	breq	.+52     	; 0xcb4 <__fixunssfsi+0x46>
     c80:	66 0f       	add	r22, r22
     c82:	77 1f       	adc	r23, r23
     c84:	88 1f       	adc	r24, r24
     c86:	99 1f       	adc	r25, r25
     c88:	1a f0       	brmi	.+6      	; 0xc90 <__fixunssfsi+0x22>
     c8a:	ba 95       	dec	r27
     c8c:	c9 f7       	brne	.-14     	; 0xc80 <__fixunssfsi+0x12>
     c8e:	12 c0       	rjmp	.+36     	; 0xcb4 <__fixunssfsi+0x46>
     c90:	b1 30       	cpi	r27, 0x01	; 1
     c92:	81 f0       	breq	.+32     	; 0xcb4 <__fixunssfsi+0x46>
     c94:	ec d0       	rcall	.+472    	; 0xe6e <__fp_zero>
     c96:	b1 e0       	ldi	r27, 0x01	; 1
     c98:	08 95       	ret
     c9a:	e9 c0       	rjmp	.+466    	; 0xe6e <__fp_zero>
     c9c:	67 2f       	mov	r22, r23
     c9e:	78 2f       	mov	r23, r24
     ca0:	88 27       	eor	r24, r24
     ca2:	b8 5f       	subi	r27, 0xF8	; 248
     ca4:	39 f0       	breq	.+14     	; 0xcb4 <__fixunssfsi+0x46>
     ca6:	b9 3f       	cpi	r27, 0xF9	; 249
     ca8:	cc f3       	brlt	.-14     	; 0xc9c <__fixunssfsi+0x2e>
     caa:	86 95       	lsr	r24
     cac:	77 95       	ror	r23
     cae:	67 95       	ror	r22
     cb0:	b3 95       	inc	r27
     cb2:	d9 f7       	brne	.-10     	; 0xcaa <__fixunssfsi+0x3c>
     cb4:	3e f4       	brtc	.+14     	; 0xcc4 <__fixunssfsi+0x56>
     cb6:	90 95       	com	r25
     cb8:	80 95       	com	r24
     cba:	70 95       	com	r23
     cbc:	61 95       	neg	r22
     cbe:	7f 4f       	sbci	r23, 0xFF	; 255
     cc0:	8f 4f       	sbci	r24, 0xFF	; 255
     cc2:	9f 4f       	sbci	r25, 0xFF	; 255
     cc4:	08 95       	ret

00000cc6 <__floatunsisf>:
     cc6:	e8 94       	clt
     cc8:	09 c0       	rjmp	.+18     	; 0xcdc <__floatsisf+0x12>

00000cca <__floatsisf>:
     cca:	97 fb       	bst	r25, 7
     ccc:	3e f4       	brtc	.+14     	; 0xcdc <__floatsisf+0x12>
     cce:	90 95       	com	r25
     cd0:	80 95       	com	r24
     cd2:	70 95       	com	r23
     cd4:	61 95       	neg	r22
     cd6:	7f 4f       	sbci	r23, 0xFF	; 255
     cd8:	8f 4f       	sbci	r24, 0xFF	; 255
     cda:	9f 4f       	sbci	r25, 0xFF	; 255
     cdc:	99 23       	and	r25, r25
     cde:	a9 f0       	breq	.+42     	; 0xd0a <__floatsisf+0x40>
     ce0:	f9 2f       	mov	r31, r25
     ce2:	96 e9       	ldi	r25, 0x96	; 150
     ce4:	bb 27       	eor	r27, r27
     ce6:	93 95       	inc	r25
     ce8:	f6 95       	lsr	r31
     cea:	87 95       	ror	r24
     cec:	77 95       	ror	r23
     cee:	67 95       	ror	r22
     cf0:	b7 95       	ror	r27
     cf2:	f1 11       	cpse	r31, r1
     cf4:	f8 cf       	rjmp	.-16     	; 0xce6 <__floatsisf+0x1c>
     cf6:	fa f4       	brpl	.+62     	; 0xd36 <__floatsisf+0x6c>
     cf8:	bb 0f       	add	r27, r27
     cfa:	11 f4       	brne	.+4      	; 0xd00 <__floatsisf+0x36>
     cfc:	60 ff       	sbrs	r22, 0
     cfe:	1b c0       	rjmp	.+54     	; 0xd36 <__floatsisf+0x6c>
     d00:	6f 5f       	subi	r22, 0xFF	; 255
     d02:	7f 4f       	sbci	r23, 0xFF	; 255
     d04:	8f 4f       	sbci	r24, 0xFF	; 255
     d06:	9f 4f       	sbci	r25, 0xFF	; 255
     d08:	16 c0       	rjmp	.+44     	; 0xd36 <__floatsisf+0x6c>
     d0a:	88 23       	and	r24, r24
     d0c:	11 f0       	breq	.+4      	; 0xd12 <__floatsisf+0x48>
     d0e:	96 e9       	ldi	r25, 0x96	; 150
     d10:	11 c0       	rjmp	.+34     	; 0xd34 <__floatsisf+0x6a>
     d12:	77 23       	and	r23, r23
     d14:	21 f0       	breq	.+8      	; 0xd1e <__floatsisf+0x54>
     d16:	9e e8       	ldi	r25, 0x8E	; 142
     d18:	87 2f       	mov	r24, r23
     d1a:	76 2f       	mov	r23, r22
     d1c:	05 c0       	rjmp	.+10     	; 0xd28 <__floatsisf+0x5e>
     d1e:	66 23       	and	r22, r22
     d20:	71 f0       	breq	.+28     	; 0xd3e <__floatsisf+0x74>
     d22:	96 e8       	ldi	r25, 0x86	; 134
     d24:	86 2f       	mov	r24, r22
     d26:	70 e0       	ldi	r23, 0x00	; 0
     d28:	60 e0       	ldi	r22, 0x00	; 0
     d2a:	2a f0       	brmi	.+10     	; 0xd36 <__floatsisf+0x6c>
     d2c:	9a 95       	dec	r25
     d2e:	66 0f       	add	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	88 1f       	adc	r24, r24
     d34:	da f7       	brpl	.-10     	; 0xd2c <__floatsisf+0x62>
     d36:	88 0f       	add	r24, r24
     d38:	96 95       	lsr	r25
     d3a:	87 95       	ror	r24
     d3c:	97 f9       	bld	r25, 7
     d3e:	08 95       	ret

00000d40 <__fp_cmp>:
     d40:	99 0f       	add	r25, r25
     d42:	00 08       	sbc	r0, r0
     d44:	55 0f       	add	r21, r21
     d46:	aa 0b       	sbc	r26, r26
     d48:	e0 e8       	ldi	r30, 0x80	; 128
     d4a:	fe ef       	ldi	r31, 0xFE	; 254
     d4c:	16 16       	cp	r1, r22
     d4e:	17 06       	cpc	r1, r23
     d50:	e8 07       	cpc	r30, r24
     d52:	f9 07       	cpc	r31, r25
     d54:	c0 f0       	brcs	.+48     	; 0xd86 <__fp_cmp+0x46>
     d56:	12 16       	cp	r1, r18
     d58:	13 06       	cpc	r1, r19
     d5a:	e4 07       	cpc	r30, r20
     d5c:	f5 07       	cpc	r31, r21
     d5e:	98 f0       	brcs	.+38     	; 0xd86 <__fp_cmp+0x46>
     d60:	62 1b       	sub	r22, r18
     d62:	73 0b       	sbc	r23, r19
     d64:	84 0b       	sbc	r24, r20
     d66:	95 0b       	sbc	r25, r21
     d68:	39 f4       	brne	.+14     	; 0xd78 <__fp_cmp+0x38>
     d6a:	0a 26       	eor	r0, r26
     d6c:	61 f0       	breq	.+24     	; 0xd86 <__fp_cmp+0x46>
     d6e:	23 2b       	or	r18, r19
     d70:	24 2b       	or	r18, r20
     d72:	25 2b       	or	r18, r21
     d74:	21 f4       	brne	.+8      	; 0xd7e <__fp_cmp+0x3e>
     d76:	08 95       	ret
     d78:	0a 26       	eor	r0, r26
     d7a:	09 f4       	brne	.+2      	; 0xd7e <__fp_cmp+0x3e>
     d7c:	a1 40       	sbci	r26, 0x01	; 1
     d7e:	a6 95       	lsr	r26
     d80:	8f ef       	ldi	r24, 0xFF	; 255
     d82:	81 1d       	adc	r24, r1
     d84:	81 1d       	adc	r24, r1
     d86:	08 95       	ret

00000d88 <__fp_inf>:
     d88:	97 f9       	bld	r25, 7
     d8a:	9f 67       	ori	r25, 0x7F	; 127
     d8c:	80 e8       	ldi	r24, 0x80	; 128
     d8e:	70 e0       	ldi	r23, 0x00	; 0
     d90:	60 e0       	ldi	r22, 0x00	; 0
     d92:	08 95       	ret

00000d94 <__fp_mintl>:
     d94:	88 23       	and	r24, r24
     d96:	71 f4       	brne	.+28     	; 0xdb4 <__fp_mintl+0x20>
     d98:	77 23       	and	r23, r23
     d9a:	21 f0       	breq	.+8      	; 0xda4 <__fp_mintl+0x10>
     d9c:	98 50       	subi	r25, 0x08	; 8
     d9e:	87 2b       	or	r24, r23
     da0:	76 2f       	mov	r23, r22
     da2:	07 c0       	rjmp	.+14     	; 0xdb2 <__fp_mintl+0x1e>
     da4:	66 23       	and	r22, r22
     da6:	11 f4       	brne	.+4      	; 0xdac <__fp_mintl+0x18>
     da8:	99 27       	eor	r25, r25
     daa:	0d c0       	rjmp	.+26     	; 0xdc6 <__fp_mintl+0x32>
     dac:	90 51       	subi	r25, 0x10	; 16
     dae:	86 2b       	or	r24, r22
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	60 e0       	ldi	r22, 0x00	; 0
     db4:	2a f0       	brmi	.+10     	; 0xdc0 <__fp_mintl+0x2c>
     db6:	9a 95       	dec	r25
     db8:	66 0f       	add	r22, r22
     dba:	77 1f       	adc	r23, r23
     dbc:	88 1f       	adc	r24, r24
     dbe:	da f7       	brpl	.-10     	; 0xdb6 <__fp_mintl+0x22>
     dc0:	88 0f       	add	r24, r24
     dc2:	96 95       	lsr	r25
     dc4:	87 95       	ror	r24
     dc6:	97 f9       	bld	r25, 7
     dc8:	08 95       	ret

00000dca <__fp_mpack>:
     dca:	9f 3f       	cpi	r25, 0xFF	; 255
     dcc:	31 f0       	breq	.+12     	; 0xdda <__fp_mpack_finite+0xc>

00000dce <__fp_mpack_finite>:
     dce:	91 50       	subi	r25, 0x01	; 1
     dd0:	20 f4       	brcc	.+8      	; 0xdda <__fp_mpack_finite+0xc>
     dd2:	87 95       	ror	r24
     dd4:	77 95       	ror	r23
     dd6:	67 95       	ror	r22
     dd8:	b7 95       	ror	r27
     dda:	88 0f       	add	r24, r24
     ddc:	91 1d       	adc	r25, r1
     dde:	96 95       	lsr	r25
     de0:	87 95       	ror	r24
     de2:	97 f9       	bld	r25, 7
     de4:	08 95       	ret

00000de6 <__fp_nan>:
     de6:	9f ef       	ldi	r25, 0xFF	; 255
     de8:	80 ec       	ldi	r24, 0xC0	; 192
     dea:	08 95       	ret

00000dec <__fp_pscA>:
     dec:	00 24       	eor	r0, r0
     dee:	0a 94       	dec	r0
     df0:	16 16       	cp	r1, r22
     df2:	17 06       	cpc	r1, r23
     df4:	18 06       	cpc	r1, r24
     df6:	09 06       	cpc	r0, r25
     df8:	08 95       	ret

00000dfa <__fp_pscB>:
     dfa:	00 24       	eor	r0, r0
     dfc:	0a 94       	dec	r0
     dfe:	12 16       	cp	r1, r18
     e00:	13 06       	cpc	r1, r19
     e02:	14 06       	cpc	r1, r20
     e04:	05 06       	cpc	r0, r21
     e06:	08 95       	ret

00000e08 <__fp_round>:
     e08:	09 2e       	mov	r0, r25
     e0a:	03 94       	inc	r0
     e0c:	00 0c       	add	r0, r0
     e0e:	11 f4       	brne	.+4      	; 0xe14 <__fp_round+0xc>
     e10:	88 23       	and	r24, r24
     e12:	52 f0       	brmi	.+20     	; 0xe28 <__fp_round+0x20>
     e14:	bb 0f       	add	r27, r27
     e16:	40 f4       	brcc	.+16     	; 0xe28 <__fp_round+0x20>
     e18:	bf 2b       	or	r27, r31
     e1a:	11 f4       	brne	.+4      	; 0xe20 <__fp_round+0x18>
     e1c:	60 ff       	sbrs	r22, 0
     e1e:	04 c0       	rjmp	.+8      	; 0xe28 <__fp_round+0x20>
     e20:	6f 5f       	subi	r22, 0xFF	; 255
     e22:	7f 4f       	sbci	r23, 0xFF	; 255
     e24:	8f 4f       	sbci	r24, 0xFF	; 255
     e26:	9f 4f       	sbci	r25, 0xFF	; 255
     e28:	08 95       	ret

00000e2a <__fp_split3>:
     e2a:	57 fd       	sbrc	r21, 7
     e2c:	90 58       	subi	r25, 0x80	; 128
     e2e:	44 0f       	add	r20, r20
     e30:	55 1f       	adc	r21, r21
     e32:	59 f0       	breq	.+22     	; 0xe4a <__fp_splitA+0x10>
     e34:	5f 3f       	cpi	r21, 0xFF	; 255
     e36:	71 f0       	breq	.+28     	; 0xe54 <__fp_splitA+0x1a>
     e38:	47 95       	ror	r20

00000e3a <__fp_splitA>:
     e3a:	88 0f       	add	r24, r24
     e3c:	97 fb       	bst	r25, 7
     e3e:	99 1f       	adc	r25, r25
     e40:	61 f0       	breq	.+24     	; 0xe5a <__fp_splitA+0x20>
     e42:	9f 3f       	cpi	r25, 0xFF	; 255
     e44:	79 f0       	breq	.+30     	; 0xe64 <__fp_splitA+0x2a>
     e46:	87 95       	ror	r24
     e48:	08 95       	ret
     e4a:	12 16       	cp	r1, r18
     e4c:	13 06       	cpc	r1, r19
     e4e:	14 06       	cpc	r1, r20
     e50:	55 1f       	adc	r21, r21
     e52:	f2 cf       	rjmp	.-28     	; 0xe38 <__fp_split3+0xe>
     e54:	46 95       	lsr	r20
     e56:	f1 df       	rcall	.-30     	; 0xe3a <__fp_splitA>
     e58:	08 c0       	rjmp	.+16     	; 0xe6a <__fp_splitA+0x30>
     e5a:	16 16       	cp	r1, r22
     e5c:	17 06       	cpc	r1, r23
     e5e:	18 06       	cpc	r1, r24
     e60:	99 1f       	adc	r25, r25
     e62:	f1 cf       	rjmp	.-30     	; 0xe46 <__fp_splitA+0xc>
     e64:	86 95       	lsr	r24
     e66:	71 05       	cpc	r23, r1
     e68:	61 05       	cpc	r22, r1
     e6a:	08 94       	sec
     e6c:	08 95       	ret

00000e6e <__fp_zero>:
     e6e:	e8 94       	clt

00000e70 <__fp_szero>:
     e70:	bb 27       	eor	r27, r27
     e72:	66 27       	eor	r22, r22
     e74:	77 27       	eor	r23, r23
     e76:	cb 01       	movw	r24, r22
     e78:	97 f9       	bld	r25, 7
     e7a:	08 95       	ret

00000e7c <__gesf2>:
     e7c:	61 df       	rcall	.-318    	; 0xd40 <__fp_cmp>
     e7e:	08 f4       	brcc	.+2      	; 0xe82 <__gesf2+0x6>
     e80:	8f ef       	ldi	r24, 0xFF	; 255
     e82:	08 95       	ret

00000e84 <__mulsf3>:
     e84:	0b d0       	rcall	.+22     	; 0xe9c <__mulsf3x>
     e86:	c0 cf       	rjmp	.-128    	; 0xe08 <__fp_round>
     e88:	b1 df       	rcall	.-158    	; 0xdec <__fp_pscA>
     e8a:	28 f0       	brcs	.+10     	; 0xe96 <__mulsf3+0x12>
     e8c:	b6 df       	rcall	.-148    	; 0xdfa <__fp_pscB>
     e8e:	18 f0       	brcs	.+6      	; 0xe96 <__mulsf3+0x12>
     e90:	95 23       	and	r25, r21
     e92:	09 f0       	breq	.+2      	; 0xe96 <__mulsf3+0x12>
     e94:	79 cf       	rjmp	.-270    	; 0xd88 <__fp_inf>
     e96:	a7 cf       	rjmp	.-178    	; 0xde6 <__fp_nan>
     e98:	11 24       	eor	r1, r1
     e9a:	ea cf       	rjmp	.-44     	; 0xe70 <__fp_szero>

00000e9c <__mulsf3x>:
     e9c:	c6 df       	rcall	.-116    	; 0xe2a <__fp_split3>
     e9e:	a0 f3       	brcs	.-24     	; 0xe88 <__mulsf3+0x4>

00000ea0 <__mulsf3_pse>:
     ea0:	95 9f       	mul	r25, r21
     ea2:	d1 f3       	breq	.-12     	; 0xe98 <__mulsf3+0x14>
     ea4:	95 0f       	add	r25, r21
     ea6:	50 e0       	ldi	r21, 0x00	; 0
     ea8:	55 1f       	adc	r21, r21
     eaa:	62 9f       	mul	r22, r18
     eac:	f0 01       	movw	r30, r0
     eae:	72 9f       	mul	r23, r18
     eb0:	bb 27       	eor	r27, r27
     eb2:	f0 0d       	add	r31, r0
     eb4:	b1 1d       	adc	r27, r1
     eb6:	63 9f       	mul	r22, r19
     eb8:	aa 27       	eor	r26, r26
     eba:	f0 0d       	add	r31, r0
     ebc:	b1 1d       	adc	r27, r1
     ebe:	aa 1f       	adc	r26, r26
     ec0:	64 9f       	mul	r22, r20
     ec2:	66 27       	eor	r22, r22
     ec4:	b0 0d       	add	r27, r0
     ec6:	a1 1d       	adc	r26, r1
     ec8:	66 1f       	adc	r22, r22
     eca:	82 9f       	mul	r24, r18
     ecc:	22 27       	eor	r18, r18
     ece:	b0 0d       	add	r27, r0
     ed0:	a1 1d       	adc	r26, r1
     ed2:	62 1f       	adc	r22, r18
     ed4:	73 9f       	mul	r23, r19
     ed6:	b0 0d       	add	r27, r0
     ed8:	a1 1d       	adc	r26, r1
     eda:	62 1f       	adc	r22, r18
     edc:	83 9f       	mul	r24, r19
     ede:	a0 0d       	add	r26, r0
     ee0:	61 1d       	adc	r22, r1
     ee2:	22 1f       	adc	r18, r18
     ee4:	74 9f       	mul	r23, r20
     ee6:	33 27       	eor	r19, r19
     ee8:	a0 0d       	add	r26, r0
     eea:	61 1d       	adc	r22, r1
     eec:	23 1f       	adc	r18, r19
     eee:	84 9f       	mul	r24, r20
     ef0:	60 0d       	add	r22, r0
     ef2:	21 1d       	adc	r18, r1
     ef4:	82 2f       	mov	r24, r18
     ef6:	76 2f       	mov	r23, r22
     ef8:	6a 2f       	mov	r22, r26
     efa:	11 24       	eor	r1, r1
     efc:	9f 57       	subi	r25, 0x7F	; 127
     efe:	50 40       	sbci	r21, 0x00	; 0
     f00:	8a f0       	brmi	.+34     	; 0xf24 <__mulsf3_pse+0x84>
     f02:	e1 f0       	breq	.+56     	; 0xf3c <__mulsf3_pse+0x9c>
     f04:	88 23       	and	r24, r24
     f06:	4a f0       	brmi	.+18     	; 0xf1a <__mulsf3_pse+0x7a>
     f08:	ee 0f       	add	r30, r30
     f0a:	ff 1f       	adc	r31, r31
     f0c:	bb 1f       	adc	r27, r27
     f0e:	66 1f       	adc	r22, r22
     f10:	77 1f       	adc	r23, r23
     f12:	88 1f       	adc	r24, r24
     f14:	91 50       	subi	r25, 0x01	; 1
     f16:	50 40       	sbci	r21, 0x00	; 0
     f18:	a9 f7       	brne	.-22     	; 0xf04 <__mulsf3_pse+0x64>
     f1a:	9e 3f       	cpi	r25, 0xFE	; 254
     f1c:	51 05       	cpc	r21, r1
     f1e:	70 f0       	brcs	.+28     	; 0xf3c <__mulsf3_pse+0x9c>
     f20:	33 cf       	rjmp	.-410    	; 0xd88 <__fp_inf>
     f22:	a6 cf       	rjmp	.-180    	; 0xe70 <__fp_szero>
     f24:	5f 3f       	cpi	r21, 0xFF	; 255
     f26:	ec f3       	brlt	.-6      	; 0xf22 <__mulsf3_pse+0x82>
     f28:	98 3e       	cpi	r25, 0xE8	; 232
     f2a:	dc f3       	brlt	.-10     	; 0xf22 <__mulsf3_pse+0x82>
     f2c:	86 95       	lsr	r24
     f2e:	77 95       	ror	r23
     f30:	67 95       	ror	r22
     f32:	b7 95       	ror	r27
     f34:	f7 95       	ror	r31
     f36:	e7 95       	ror	r30
     f38:	9f 5f       	subi	r25, 0xFF	; 255
     f3a:	c1 f7       	brne	.-16     	; 0xf2c <__mulsf3_pse+0x8c>
     f3c:	fe 2b       	or	r31, r30
     f3e:	88 0f       	add	r24, r24
     f40:	91 1d       	adc	r25, r1
     f42:	96 95       	lsr	r25
     f44:	87 95       	ror	r24
     f46:	97 f9       	bld	r25, 7
     f48:	08 95       	ret

00000f4a <round>:
     f4a:	77 df       	rcall	.-274    	; 0xe3a <__fp_splitA>
     f4c:	e0 f0       	brcs	.+56     	; 0xf86 <round+0x3c>
     f4e:	9e 37       	cpi	r25, 0x7E	; 126
     f50:	d8 f0       	brcs	.+54     	; 0xf88 <round+0x3e>
     f52:	96 39       	cpi	r25, 0x96	; 150
     f54:	b8 f4       	brcc	.+46     	; 0xf84 <round+0x3a>
     f56:	9e 38       	cpi	r25, 0x8E	; 142
     f58:	48 f4       	brcc	.+18     	; 0xf6c <round+0x22>
     f5a:	67 2f       	mov	r22, r23
     f5c:	78 2f       	mov	r23, r24
     f5e:	88 27       	eor	r24, r24
     f60:	98 5f       	subi	r25, 0xF8	; 248
     f62:	f9 cf       	rjmp	.-14     	; 0xf56 <round+0xc>
     f64:	86 95       	lsr	r24
     f66:	77 95       	ror	r23
     f68:	67 95       	ror	r22
     f6a:	93 95       	inc	r25
     f6c:	95 39       	cpi	r25, 0x95	; 149
     f6e:	d0 f3       	brcs	.-12     	; 0xf64 <round+0x1a>
     f70:	b6 2f       	mov	r27, r22
     f72:	b1 70       	andi	r27, 0x01	; 1
     f74:	6b 0f       	add	r22, r27
     f76:	71 1d       	adc	r23, r1
     f78:	81 1d       	adc	r24, r1
     f7a:	20 f4       	brcc	.+8      	; 0xf84 <round+0x3a>
     f7c:	87 95       	ror	r24
     f7e:	77 95       	ror	r23
     f80:	67 95       	ror	r22
     f82:	93 95       	inc	r25
     f84:	07 cf       	rjmp	.-498    	; 0xd94 <__fp_mintl>
     f86:	21 cf       	rjmp	.-446    	; 0xdca <__fp_mpack>
     f88:	73 cf       	rjmp	.-282    	; 0xe70 <__fp_szero>

00000f8a <atof>:
     f8a:	66 27       	eor	r22, r22
     f8c:	77 27       	eor	r23, r23
     f8e:	1a c0       	rjmp	.+52     	; 0xfc4 <strtod>

00000f90 <strchr>:
     f90:	fc 01       	movw	r30, r24
     f92:	81 91       	ld	r24, Z+
     f94:	86 17       	cp	r24, r22
     f96:	21 f0       	breq	.+8      	; 0xfa0 <strchr+0x10>
     f98:	88 23       	and	r24, r24
     f9a:	d9 f7       	brne	.-10     	; 0xf92 <strchr+0x2>
     f9c:	99 27       	eor	r25, r25
     f9e:	08 95       	ret
     fa0:	31 97       	sbiw	r30, 0x01	; 1
     fa2:	cf 01       	movw	r24, r30
     fa4:	08 95       	ret

00000fa6 <strncpy>:
     fa6:	fb 01       	movw	r30, r22
     fa8:	dc 01       	movw	r26, r24
     faa:	41 50       	subi	r20, 0x01	; 1
     fac:	50 40       	sbci	r21, 0x00	; 0
     fae:	48 f0       	brcs	.+18     	; 0xfc2 <strncpy+0x1c>
     fb0:	01 90       	ld	r0, Z+
     fb2:	0d 92       	st	X+, r0
     fb4:	00 20       	and	r0, r0
     fb6:	c9 f7       	brne	.-14     	; 0xfaa <strncpy+0x4>
     fb8:	01 c0       	rjmp	.+2      	; 0xfbc <strncpy+0x16>
     fba:	1d 92       	st	X+, r1
     fbc:	41 50       	subi	r20, 0x01	; 1
     fbe:	50 40       	sbci	r21, 0x00	; 0
     fc0:	e0 f7       	brcc	.-8      	; 0xfba <strncpy+0x14>
     fc2:	08 95       	ret

00000fc4 <strtod>:
     fc4:	6f 92       	push	r6
     fc6:	7f 92       	push	r7
     fc8:	8f 92       	push	r8
     fca:	9f 92       	push	r9
     fcc:	af 92       	push	r10
     fce:	bf 92       	push	r11
     fd0:	cf 92       	push	r12
     fd2:	df 92       	push	r13
     fd4:	ef 92       	push	r14
     fd6:	ff 92       	push	r15
     fd8:	0f 93       	push	r16
     fda:	1f 93       	push	r17
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
     fe0:	ec 01       	movw	r28, r24
     fe2:	7b 01       	movw	r14, r22
     fe4:	61 15       	cp	r22, r1
     fe6:	71 05       	cpc	r23, r1
     fe8:	19 f0       	breq	.+6      	; 0xff0 <strtod+0x2c>
     fea:	db 01       	movw	r26, r22
     fec:	8d 93       	st	X+, r24
     fee:	9c 93       	st	X, r25
     ff0:	8e 01       	movw	r16, r28
     ff2:	0f 5f       	subi	r16, 0xFF	; 255
     ff4:	1f 4f       	sbci	r17, 0xFF	; 255
     ff6:	78 80       	ld	r7, Y
     ff8:	87 2d       	mov	r24, r7
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	49 d1       	rcall	.+658    	; 0x1290 <isspace>
     ffe:	89 2b       	or	r24, r25
    1000:	11 f0       	breq	.+4      	; 0x1006 <strtod+0x42>
    1002:	e8 01       	movw	r28, r16
    1004:	f5 cf       	rjmp	.-22     	; 0xff0 <strtod+0x2c>
    1006:	bd e2       	ldi	r27, 0x2D	; 45
    1008:	7b 12       	cpse	r7, r27
    100a:	05 c0       	rjmp	.+10     	; 0x1016 <strtod+0x52>
    100c:	0f 5f       	subi	r16, 0xFF	; 255
    100e:	1f 4f       	sbci	r17, 0xFF	; 255
    1010:	79 80       	ldd	r7, Y+1	; 0x01
    1012:	c1 e0       	ldi	r28, 0x01	; 1
    1014:	08 c0       	rjmp	.+16     	; 0x1026 <strtod+0x62>
    1016:	eb e2       	ldi	r30, 0x2B	; 43
    1018:	7e 12       	cpse	r7, r30
    101a:	04 c0       	rjmp	.+8      	; 0x1024 <strtod+0x60>
    101c:	8e 01       	movw	r16, r28
    101e:	0e 5f       	subi	r16, 0xFE	; 254
    1020:	1f 4f       	sbci	r17, 0xFF	; 255
    1022:	79 80       	ldd	r7, Y+1	; 0x01
    1024:	c0 e0       	ldi	r28, 0x00	; 0
    1026:	68 01       	movw	r12, r16
    1028:	f1 e0       	ldi	r31, 0x01	; 1
    102a:	cf 1a       	sub	r12, r31
    102c:	d1 08       	sbc	r13, r1
    102e:	43 e0       	ldi	r20, 0x03	; 3
    1030:	50 e0       	ldi	r21, 0x00	; 0
    1032:	64 e9       	ldi	r22, 0x94	; 148
    1034:	70 e0       	ldi	r23, 0x00	; 0
    1036:	c6 01       	movw	r24, r12
    1038:	33 d1       	rcall	.+614    	; 0x12a0 <strncasecmp_P>
    103a:	89 2b       	or	r24, r25
    103c:	e9 f4       	brne	.+58     	; 0x1078 <strtod+0xb4>
    103e:	68 01       	movw	r12, r16
    1040:	22 e0       	ldi	r18, 0x02	; 2
    1042:	c2 0e       	add	r12, r18
    1044:	d1 1c       	adc	r13, r1
    1046:	45 e0       	ldi	r20, 0x05	; 5
    1048:	50 e0       	ldi	r21, 0x00	; 0
    104a:	6f e8       	ldi	r22, 0x8F	; 143
    104c:	70 e0       	ldi	r23, 0x00	; 0
    104e:	c6 01       	movw	r24, r12
    1050:	27 d1       	rcall	.+590    	; 0x12a0 <strncasecmp_P>
    1052:	89 2b       	or	r24, r25
    1054:	21 f4       	brne	.+8      	; 0x105e <strtod+0x9a>
    1056:	68 01       	movw	r12, r16
    1058:	87 e0       	ldi	r24, 0x07	; 7
    105a:	c8 0e       	add	r12, r24
    105c:	d1 1c       	adc	r13, r1
    105e:	e1 14       	cp	r14, r1
    1060:	f1 04       	cpc	r15, r1
    1062:	19 f0       	breq	.+6      	; 0x106a <strtod+0xa6>
    1064:	d7 01       	movw	r26, r14
    1066:	cd 92       	st	X+, r12
    1068:	dc 92       	st	X, r13
    106a:	c1 11       	cpse	r28, r1
    106c:	f9 c0       	rjmp	.+498    	; 0x1260 <strtod+0x29c>
    106e:	60 e0       	ldi	r22, 0x00	; 0
    1070:	70 e0       	ldi	r23, 0x00	; 0
    1072:	80 e8       	ldi	r24, 0x80	; 128
    1074:	9f e7       	ldi	r25, 0x7F	; 127
    1076:	fd c0       	rjmp	.+506    	; 0x1272 <strtod+0x2ae>
    1078:	43 e0       	ldi	r20, 0x03	; 3
    107a:	50 e0       	ldi	r21, 0x00	; 0
    107c:	6c e8       	ldi	r22, 0x8C	; 140
    107e:	70 e0       	ldi	r23, 0x00	; 0
    1080:	c6 01       	movw	r24, r12
    1082:	0e d1       	rcall	.+540    	; 0x12a0 <strncasecmp_P>
    1084:	89 2b       	or	r24, r25
    1086:	51 f4       	brne	.+20     	; 0x109c <strtod+0xd8>
    1088:	e1 14       	cp	r14, r1
    108a:	f1 04       	cpc	r15, r1
    108c:	09 f4       	brne	.+2      	; 0x1090 <strtod+0xcc>
    108e:	ed c0       	rjmp	.+474    	; 0x126a <strtod+0x2a6>
    1090:	0e 5f       	subi	r16, 0xFE	; 254
    1092:	1f 4f       	sbci	r17, 0xFF	; 255
    1094:	f7 01       	movw	r30, r14
    1096:	11 83       	std	Z+1, r17	; 0x01
    1098:	00 83       	st	Z, r16
    109a:	e7 c0       	rjmp	.+462    	; 0x126a <strtod+0x2a6>
    109c:	68 01       	movw	r12, r16
    109e:	60 e0       	ldi	r22, 0x00	; 0
    10a0:	70 e0       	ldi	r23, 0x00	; 0
    10a2:	cb 01       	movw	r24, r22
    10a4:	00 e0       	ldi	r16, 0x00	; 0
    10a6:	10 e0       	ldi	r17, 0x00	; 0
    10a8:	f6 01       	movw	r30, r12
    10aa:	d0 ed       	ldi	r29, 0xD0	; 208
    10ac:	d7 0d       	add	r29, r7
    10ae:	da 30       	cpi	r29, 0x0A	; 10
    10b0:	50 f5       	brcc	.+84     	; 0x1106 <strtod+0x142>
    10b2:	2c 2f       	mov	r18, r28
    10b4:	22 60       	ori	r18, 0x02	; 2
    10b6:	62 2e       	mov	r6, r18
    10b8:	2c 2f       	mov	r18, r28
    10ba:	28 70       	andi	r18, 0x08	; 8
    10bc:	c2 ff       	sbrs	r28, 2
    10be:	05 c0       	rjmp	.+10     	; 0x10ca <strtod+0x106>
    10c0:	21 11       	cpse	r18, r1
    10c2:	27 c0       	rjmp	.+78     	; 0x1112 <strtod+0x14e>
    10c4:	0f 5f       	subi	r16, 0xFF	; 255
    10c6:	1f 4f       	sbci	r17, 0xFF	; 255
    10c8:	24 c0       	rjmp	.+72     	; 0x1112 <strtod+0x14e>
    10ca:	22 23       	and	r18, r18
    10cc:	11 f0       	breq	.+4      	; 0x10d2 <strtod+0x10e>
    10ce:	01 50       	subi	r16, 0x01	; 1
    10d0:	11 09       	sbc	r17, r1
    10d2:	a5 e0       	ldi	r26, 0x05	; 5
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	9b 01       	movw	r18, r22
    10d8:	ac 01       	movw	r20, r24
    10da:	fd d0       	rcall	.+506    	; 0x12d6 <__muluhisi3>
    10dc:	4b 01       	movw	r8, r22
    10de:	5c 01       	movw	r10, r24
    10e0:	88 0c       	add	r8, r8
    10e2:	99 1c       	adc	r9, r9
    10e4:	aa 1c       	adc	r10, r10
    10e6:	bb 1c       	adc	r11, r11
    10e8:	c5 01       	movw	r24, r10
    10ea:	b4 01       	movw	r22, r8
    10ec:	6d 0f       	add	r22, r29
    10ee:	71 1d       	adc	r23, r1
    10f0:	81 1d       	adc	r24, r1
    10f2:	91 1d       	adc	r25, r1
    10f4:	68 39       	cpi	r22, 0x98	; 152
    10f6:	a9 e9       	ldi	r26, 0x99	; 153
    10f8:	7a 07       	cpc	r23, r26
    10fa:	8a 07       	cpc	r24, r26
    10fc:	a9 e1       	ldi	r26, 0x19	; 25
    10fe:	9a 07       	cpc	r25, r26
    1100:	40 f0       	brcs	.+16     	; 0x1112 <strtod+0x14e>
    1102:	c6 60       	ori	r28, 0x06	; 6
    1104:	05 c0       	rjmp	.+10     	; 0x1110 <strtod+0x14c>
    1106:	de 3f       	cpi	r29, 0xFE	; 254
    1108:	51 f4       	brne	.+20     	; 0x111e <strtod+0x15a>
    110a:	c3 fd       	sbrc	r28, 3
    110c:	44 c0       	rjmp	.+136    	; 0x1196 <strtod+0x1d2>
    110e:	c8 60       	ori	r28, 0x08	; 8
    1110:	6c 2e       	mov	r6, r28
    1112:	bf ef       	ldi	r27, 0xFF	; 255
    1114:	cb 1a       	sub	r12, r27
    1116:	db 0a       	sbc	r13, r27
    1118:	70 80       	ld	r7, Z
    111a:	c6 2d       	mov	r28, r6
    111c:	c5 cf       	rjmp	.-118    	; 0x10a8 <strtod+0xe4>
    111e:	2d 2f       	mov	r18, r29
    1120:	2f 7d       	andi	r18, 0xDF	; 223
    1122:	25 31       	cpi	r18, 0x15	; 21
    1124:	c1 f5       	brne	.+112    	; 0x1196 <strtod+0x1d2>
    1126:	40 81       	ld	r20, Z
    1128:	4d 32       	cpi	r20, 0x2D	; 45
    112a:	11 f4       	brne	.+4      	; 0x1130 <strtod+0x16c>
    112c:	c0 61       	ori	r28, 0x10	; 16
    112e:	06 c0       	rjmp	.+12     	; 0x113c <strtod+0x178>
    1130:	4b 32       	cpi	r20, 0x2B	; 43
    1132:	21 f0       	breq	.+8      	; 0x113c <strtod+0x178>
    1134:	31 96       	adiw	r30, 0x01	; 1
    1136:	21 e0       	ldi	r18, 0x01	; 1
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	06 c0       	rjmp	.+12     	; 0x1148 <strtod+0x184>
    113c:	32 96       	adiw	r30, 0x02	; 2
    113e:	d6 01       	movw	r26, r12
    1140:	11 96       	adiw	r26, 0x01	; 1
    1142:	4c 91       	ld	r20, X
    1144:	22 e0       	ldi	r18, 0x02	; 2
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	a0 ed       	ldi	r26, 0xD0	; 208
    114a:	a4 0f       	add	r26, r20
    114c:	aa 30       	cpi	r26, 0x0A	; 10
    114e:	18 f0       	brcs	.+6      	; 0x1156 <strtod+0x192>
    1150:	e2 1b       	sub	r30, r18
    1152:	f3 0b       	sbc	r31, r19
    1154:	20 c0       	rjmp	.+64     	; 0x1196 <strtod+0x1d2>
    1156:	40 e0       	ldi	r20, 0x00	; 0
    1158:	50 e0       	ldi	r21, 0x00	; 0
    115a:	40 38       	cpi	r20, 0x80	; 128
    115c:	bc e0       	ldi	r27, 0x0C	; 12
    115e:	5b 07       	cpc	r21, r27
    1160:	5c f4       	brge	.+22     	; 0x1178 <strtod+0x1b4>
    1162:	9a 01       	movw	r18, r20
    1164:	22 0f       	add	r18, r18
    1166:	33 1f       	adc	r19, r19
    1168:	22 0f       	add	r18, r18
    116a:	33 1f       	adc	r19, r19
    116c:	42 0f       	add	r20, r18
    116e:	53 1f       	adc	r21, r19
    1170:	44 0f       	add	r20, r20
    1172:	55 1f       	adc	r21, r21
    1174:	4a 0f       	add	r20, r26
    1176:	51 1d       	adc	r21, r1
    1178:	31 96       	adiw	r30, 0x01	; 1
    117a:	df 01       	movw	r26, r30
    117c:	11 97       	sbiw	r26, 0x01	; 1
    117e:	2c 91       	ld	r18, X
    1180:	a0 ed       	ldi	r26, 0xD0	; 208
    1182:	a2 0f       	add	r26, r18
    1184:	aa 30       	cpi	r26, 0x0A	; 10
    1186:	48 f3       	brcs	.-46     	; 0x115a <strtod+0x196>
    1188:	c4 ff       	sbrs	r28, 4
    118a:	03 c0       	rjmp	.+6      	; 0x1192 <strtod+0x1ce>
    118c:	51 95       	neg	r21
    118e:	41 95       	neg	r20
    1190:	51 09       	sbc	r21, r1
    1192:	04 0f       	add	r16, r20
    1194:	15 1f       	adc	r17, r21
    1196:	c1 ff       	sbrs	r28, 1
    1198:	07 c0       	rjmp	.+14     	; 0x11a8 <strtod+0x1e4>
    119a:	e1 14       	cp	r14, r1
    119c:	f1 04       	cpc	r15, r1
    119e:	21 f0       	breq	.+8      	; 0x11a8 <strtod+0x1e4>
    11a0:	31 97       	sbiw	r30, 0x01	; 1
    11a2:	d7 01       	movw	r26, r14
    11a4:	ed 93       	st	X+, r30
    11a6:	fc 93       	st	X, r31
    11a8:	8e dd       	rcall	.-1252   	; 0xcc6 <__floatunsisf>
    11aa:	c3 70       	andi	r28, 0x03	; 3
    11ac:	c3 30       	cpi	r28, 0x03	; 3
    11ae:	19 f0       	breq	.+6      	; 0x11b6 <strtod+0x1f2>
    11b0:	6b 01       	movw	r12, r22
    11b2:	7c 01       	movw	r14, r24
    11b4:	06 c0       	rjmp	.+12     	; 0x11c2 <strtod+0x1fe>
    11b6:	6b 01       	movw	r12, r22
    11b8:	7c 01       	movw	r14, r24
    11ba:	f7 fa       	bst	r15, 7
    11bc:	f0 94       	com	r15
    11be:	f7 f8       	bld	r15, 7
    11c0:	f0 94       	com	r15
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	a9 01       	movw	r20, r18
    11c8:	c7 01       	movw	r24, r14
    11ca:	b6 01       	movw	r22, r12
    11cc:	df dc       	rcall	.-1602   	; 0xb8c <__cmpsf2>
    11ce:	88 23       	and	r24, r24
    11d0:	09 f4       	brne	.+2      	; 0x11d4 <strtod+0x210>
    11d2:	43 c0       	rjmp	.+134    	; 0x125a <strtod+0x296>
    11d4:	17 ff       	sbrs	r17, 7
    11d6:	06 c0       	rjmp	.+12     	; 0x11e4 <strtod+0x220>
    11d8:	11 95       	neg	r17
    11da:	01 95       	neg	r16
    11dc:	11 09       	sbc	r17, r1
    11de:	cb ea       	ldi	r28, 0xAB	; 171
    11e0:	d0 e0       	ldi	r29, 0x00	; 0
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <strtod+0x224>
    11e4:	c3 ec       	ldi	r28, 0xC3	; 195
    11e6:	d0 e0       	ldi	r29, 0x00	; 0
    11e8:	5e 01       	movw	r10, r28
    11ea:	b8 e1       	ldi	r27, 0x18	; 24
    11ec:	ab 1a       	sub	r10, r27
    11ee:	b1 08       	sbc	r11, r1
    11f0:	46 01       	movw	r8, r12
    11f2:	be 2d       	mov	r27, r14
    11f4:	af 2d       	mov	r26, r15
    11f6:	90 e2       	ldi	r25, 0x20	; 32
    11f8:	e9 2e       	mov	r14, r25
    11fa:	f1 2c       	mov	r15, r1
    11fc:	0e 15       	cp	r16, r14
    11fe:	1f 05       	cpc	r17, r15
    1200:	7c f0       	brlt	.+30     	; 0x1220 <strtod+0x25c>
    1202:	fe 01       	movw	r30, r28
    1204:	25 91       	lpm	r18, Z+
    1206:	35 91       	lpm	r19, Z+
    1208:	45 91       	lpm	r20, Z+
    120a:	54 91       	lpm	r21, Z
    120c:	b4 01       	movw	r22, r8
    120e:	8b 2f       	mov	r24, r27
    1210:	9a 2f       	mov	r25, r26
    1212:	38 de       	rcall	.-912    	; 0xe84 <__mulsf3>
    1214:	4b 01       	movw	r8, r22
    1216:	b8 2f       	mov	r27, r24
    1218:	a9 2f       	mov	r26, r25
    121a:	0e 19       	sub	r16, r14
    121c:	1f 09       	sbc	r17, r15
    121e:	ee cf       	rjmp	.-36     	; 0x11fc <strtod+0x238>
    1220:	24 97       	sbiw	r28, 0x04	; 4
    1222:	f5 94       	asr	r15
    1224:	e7 94       	ror	r14
    1226:	ca 15       	cp	r28, r10
    1228:	db 05       	cpc	r29, r11
    122a:	41 f7       	brne	.-48     	; 0x11fc <strtod+0x238>
    122c:	64 01       	movw	r12, r8
    122e:	eb 2e       	mov	r14, r27
    1230:	fa 2e       	mov	r15, r26
    1232:	8e 2d       	mov	r24, r14
    1234:	88 0f       	add	r24, r24
    1236:	8f 2d       	mov	r24, r15
    1238:	88 1f       	adc	r24, r24
    123a:	8f 3f       	cpi	r24, 0xFF	; 255
    123c:	41 f0       	breq	.+16     	; 0x124e <strtod+0x28a>
    123e:	20 e0       	ldi	r18, 0x00	; 0
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	a9 01       	movw	r20, r18
    1244:	c7 01       	movw	r24, r14
    1246:	b6 01       	movw	r22, r12
    1248:	a1 dc       	rcall	.-1726   	; 0xb8c <__cmpsf2>
    124a:	81 11       	cpse	r24, r1
    124c:	06 c0       	rjmp	.+12     	; 0x125a <strtod+0x296>
    124e:	82 e2       	ldi	r24, 0x22	; 34
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <errno+0x1>
    1256:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <errno>
    125a:	c7 01       	movw	r24, r14
    125c:	b6 01       	movw	r22, r12
    125e:	09 c0       	rjmp	.+18     	; 0x1272 <strtod+0x2ae>
    1260:	60 e0       	ldi	r22, 0x00	; 0
    1262:	70 e0       	ldi	r23, 0x00	; 0
    1264:	80 e8       	ldi	r24, 0x80	; 128
    1266:	9f ef       	ldi	r25, 0xFF	; 255
    1268:	04 c0       	rjmp	.+8      	; 0x1272 <strtod+0x2ae>
    126a:	60 e0       	ldi	r22, 0x00	; 0
    126c:	70 e0       	ldi	r23, 0x00	; 0
    126e:	80 ec       	ldi	r24, 0xC0	; 192
    1270:	9f e7       	ldi	r25, 0x7F	; 127
    1272:	df 91       	pop	r29
    1274:	cf 91       	pop	r28
    1276:	1f 91       	pop	r17
    1278:	0f 91       	pop	r16
    127a:	ff 90       	pop	r15
    127c:	ef 90       	pop	r14
    127e:	df 90       	pop	r13
    1280:	cf 90       	pop	r12
    1282:	bf 90       	pop	r11
    1284:	af 90       	pop	r10
    1286:	9f 90       	pop	r9
    1288:	8f 90       	pop	r8
    128a:	7f 90       	pop	r7
    128c:	6f 90       	pop	r6
    128e:	08 95       	ret

00001290 <isspace>:
    1290:	91 11       	cpse	r25, r1
    1292:	1e c0       	rjmp	.+60     	; 0x12d0 <__ctype_isfalse>
    1294:	80 32       	cpi	r24, 0x20	; 32
    1296:	19 f0       	breq	.+6      	; 0x129e <isspace+0xe>
    1298:	89 50       	subi	r24, 0x09	; 9
    129a:	85 50       	subi	r24, 0x05	; 5
    129c:	d0 f7       	brcc	.-12     	; 0x1292 <isspace+0x2>
    129e:	08 95       	ret

000012a0 <strncasecmp_P>:
    12a0:	fb 01       	movw	r30, r22
    12a2:	dc 01       	movw	r26, r24
    12a4:	41 50       	subi	r20, 0x01	; 1
    12a6:	50 40       	sbci	r21, 0x00	; 0
    12a8:	88 f0       	brcs	.+34     	; 0x12cc <strncasecmp_P+0x2c>
    12aa:	8d 91       	ld	r24, X+
    12ac:	81 34       	cpi	r24, 0x41	; 65
    12ae:	1c f0       	brlt	.+6      	; 0x12b6 <strncasecmp_P+0x16>
    12b0:	8b 35       	cpi	r24, 0x5B	; 91
    12b2:	0c f4       	brge	.+2      	; 0x12b6 <strncasecmp_P+0x16>
    12b4:	80 5e       	subi	r24, 0xE0	; 224
    12b6:	65 91       	lpm	r22, Z+
    12b8:	61 34       	cpi	r22, 0x41	; 65
    12ba:	1c f0       	brlt	.+6      	; 0x12c2 <strncasecmp_P+0x22>
    12bc:	6b 35       	cpi	r22, 0x5B	; 91
    12be:	0c f4       	brge	.+2      	; 0x12c2 <strncasecmp_P+0x22>
    12c0:	60 5e       	subi	r22, 0xE0	; 224
    12c2:	86 1b       	sub	r24, r22
    12c4:	61 11       	cpse	r22, r1
    12c6:	71 f3       	breq	.-36     	; 0x12a4 <strncasecmp_P+0x4>
    12c8:	99 0b       	sbc	r25, r25
    12ca:	08 95       	ret
    12cc:	88 1b       	sub	r24, r24
    12ce:	fc cf       	rjmp	.-8      	; 0x12c8 <strncasecmp_P+0x28>

000012d0 <__ctype_isfalse>:
    12d0:	99 27       	eor	r25, r25
    12d2:	88 27       	eor	r24, r24

000012d4 <__ctype_istrue>:
    12d4:	08 95       	ret

000012d6 <__muluhisi3>:
    12d6:	09 d0       	rcall	.+18     	; 0x12ea <__umulhisi3>
    12d8:	a5 9f       	mul	r26, r21
    12da:	90 0d       	add	r25, r0
    12dc:	b4 9f       	mul	r27, r20
    12de:	90 0d       	add	r25, r0
    12e0:	a4 9f       	mul	r26, r20
    12e2:	80 0d       	add	r24, r0
    12e4:	91 1d       	adc	r25, r1
    12e6:	11 24       	eor	r1, r1
    12e8:	08 95       	ret

000012ea <__umulhisi3>:
    12ea:	a2 9f       	mul	r26, r18
    12ec:	b0 01       	movw	r22, r0
    12ee:	b3 9f       	mul	r27, r19
    12f0:	c0 01       	movw	r24, r0
    12f2:	a3 9f       	mul	r26, r19
    12f4:	70 0d       	add	r23, r0
    12f6:	81 1d       	adc	r24, r1
    12f8:	11 24       	eor	r1, r1
    12fa:	91 1d       	adc	r25, r1
    12fc:	b2 9f       	mul	r27, r18
    12fe:	70 0d       	add	r23, r0
    1300:	81 1d       	adc	r24, r1
    1302:	11 24       	eor	r1, r1
    1304:	91 1d       	adc	r25, r1
    1306:	08 95       	ret

00001308 <_exit>:
    1308:	f8 94       	cli

0000130a <__stop_program>:
    130a:	ff cf       	rjmp	.-2      	; 0x130a <__stop_program>
